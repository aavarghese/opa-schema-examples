{
  "definitions": {
    "com.github.openshift.api.apps.v1.CustomDeploymentStrategyParams": {
      "description": "CustomDeploymentStrategyParams are the input to the Custom deployment strategy.",
      "properties": {
        "command": {
          "description": "Command is optional and overrides CMD in the container Image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "environment": {
          "description": "Environment holds the environment which will be given to the container for Image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "image": {
          "description": "Image specifies a container image which can carry out a deployment.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentCause": {
      "description": "DeploymentCause captures information about a particular cause of a deployment.",
      "required": [
        "type"
      ],
      "properties": {
        "imageTrigger": {
          "description": "ImageTrigger contains the image trigger details, if this trigger was fired based on an image change",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentCauseImageTrigger"
        },
        "type": {
          "description": "Type of the trigger that resulted in the creation of a new deployment",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentCauseImageTrigger": {
      "description": "DeploymentCauseImageTrigger represents details about the cause of a deployment originating from an image change trigger",
      "required": [
        "from"
      ],
      "properties": {
        "from": {
          "description": "From is a reference to the changed object which triggered a deployment. The field may have the kinds DockerImage, ImageStreamTag, or ImageStreamImage.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment config at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentConfig": {
      "description": "Deployment Configs define the template for a pod and manages deploying new images or configuration changes. A single deployment configuration is usually analogous to a single micro-service. Can support many different deployment patterns, including full restart, customizable rolling updates, and  fully custom behaviors, as well as pre- and post- deployment hooks. Each individual deployment is represented as a replication controller.\n\nA deployment is \"triggered\" when its configuration is changed or a tag in an Image Stream is changed. Triggers can be disabled to allow manual control over a deployment. The \"strategy\" determines how the deployment is carried out and may be changed at any time. The `latestVersion` field is updated when a new deployment is triggered by any means.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentConfig"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents a desired deployment state and how to deploy to it.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentConfigSpec"
        },
        "status": {
          "description": "Status represents the current deployment state.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentConfigStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentConfig",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentConfig",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigList": {
      "description": "DeploymentConfigList is a collection of deployment configs.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of deployment configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentConfigList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentConfigList",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentConfigList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigRollback": {
      "description": "DeploymentConfigRollback provides the input to rollback generation.",
      "required": [
        "name",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentConfigRollback"
          ]
        },
        "name": {
          "description": "Name of the deployment config that will be rolled back.",
          "type": "string"
        },
        "spec": {
          "description": "Spec defines the options to rollback generation.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentConfigRollbackSpec"
        },
        "updatedAnnotations": {
          "description": "UpdatedAnnotations is a set of new annotations that will be added in the deployment config.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentConfigRollback",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentConfigRollback",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigRollbackSpec": {
      "description": "DeploymentConfigRollbackSpec represents the options for rollback generation.",
      "required": [
        "from",
        "includeTriggers",
        "includeTemplate",
        "includeReplicationMeta",
        "includeStrategy"
      ],
      "properties": {
        "from": {
          "description": "From points to a ReplicationController which is a deployment.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "includeReplicationMeta": {
          "description": "IncludeReplicationMeta specifies whether to include the replica count and selector.",
          "type": "boolean"
        },
        "includeStrategy": {
          "description": "IncludeStrategy specifies whether to include the deployment Strategy.",
          "type": "boolean"
        },
        "includeTemplate": {
          "description": "IncludeTemplate specifies whether to include the PodTemplateSpec.",
          "type": "boolean"
        },
        "includeTriggers": {
          "description": "IncludeTriggers specifies whether to include config Triggers.",
          "type": "boolean"
        },
        "revision": {
          "description": "Revision to rollback to. If set to 0, rollback to the last revision.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigSpec": {
      "description": "DeploymentConfigSpec represents the desired state of the deployment.",
      "properties": {
        "minReadySeconds": {
          "description": "MinReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Paused indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers.",
          "type": "boolean"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "RevisionHistoryLimit is the number of old ReplicationControllers to retain to allow for rollbacks. This field is a pointer to allow for differentiation between an explicit zero and not specified. Defaults to 10. (This only applies to DeploymentConfigs created via the new group API resource, not the legacy resource.)",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the Replicas count.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "strategy": {
          "description": "Strategy describes how a deployment is executed.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentStrategy"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "test": {
          "description": "Test ensures that this deployment config will have zero replicas except while a deployment is running. This allows the deployment config to be used as a continuous deployment test - triggering on images, running the deployment, and then succeeding or failing. Post strategy hooks and After actions can be used to integrate successful deployment with an action.",
          "type": "boolean"
        },
        "triggers": {
          "description": "Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion. If null, defaults to having a config change trigger.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentTriggerPolicy"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentConfigStatus": {
      "description": "DeploymentConfigStatus represents the current deployment state.",
      "required": [
        "latestVersion",
        "observedGeneration",
        "replicas",
        "updatedReplicas",
        "availableReplicas",
        "unavailableReplicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "AvailableReplicas is the total number of available pods targeted by this deployment config.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of a deployment config's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "details": {
          "description": "Details are the reasons for the update to this deployment config. This could be based on a change made by the user or caused by an automatic trigger",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentDetails"
        },
        "latestVersion": {
          "description": "LatestVersion is used to determine whether the current deployment associated with a deployment config is out of sync.",
          "type": "integer",
          "format": "int64"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed by the deployment config controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the total number of pods targeted by this deployment config.",
          "type": "integer",
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "UnavailableReplicas is the total number of unavailable pods targeted by this deployment config.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "UpdatedReplicas is the total number of non-terminated pods targeted by this deployment config that have the desired template spec.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentDetails": {
      "description": "DeploymentDetails captures information about the causes of a deployment.",
      "required": [
        "causes"
      ],
      "properties": {
        "causes": {
          "description": "Causes are extended data associated with all the causes for creating a new deployment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentCause"
          }
        },
        "message": {
          "description": "Message is the user specified change message, if this deployment was triggered manually by the user",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentLog": {
      "description": "DeploymentLog represents the logs for a deployment",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentLog"
          ]
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentLog",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentLog",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentRequest": {
      "description": "DeploymentRequest is a request to a deployment config for a new deployment.",
      "required": [
        "name",
        "latest",
        "force"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "apps.openshift.io/v1"
          ]
        },
        "excludeTriggers": {
          "description": "ExcludeTriggers instructs the instantiator to avoid processing the specified triggers. This field overrides the triggers from latest and allows clients to control specific logic. This field is ignored if not specified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "force": {
          "description": "Force will try to force a new deployment to run. If the deployment config is paused, then setting this to true will return an Invalid error.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentRequest"
          ]
        },
        "latest": {
          "description": "Latest will update the deployment config with the latest state from all triggers.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the deployment config for requesting a new deployment.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeploymentRequest",
          "version": "v1"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeploymentRequest",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to perform a deployment.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "ActiveDeadlineSeconds is the duration in seconds that the deployer pods for this deployment config may be active on a node before the system actively tries to terminate them.",
          "type": "integer",
          "format": "int64"
        },
        "annotations": {
          "description": "Annotations is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "customParams": {
          "description": "CustomParams are the input to the Custom deployment strategy, and may also be specified for the Recreate and Rolling strategies to customize the execution process that runs the deployment.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.CustomDeploymentStrategyParams"
        },
        "labels": {
          "description": "Labels is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "recreateParams": {
          "description": "RecreateParams are the input to the Recreate deployment strategy.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.RecreateDeploymentStrategyParams"
        },
        "resources": {
          "description": "Resources contains resource requirements to execute the deployment and any hooks.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "rollingParams": {
          "description": "RollingParams are the input to the Rolling deployment strategy.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.RollingDeploymentStrategyParams"
        },
        "type": {
          "description": "Type is the name of a deployment strategy.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentTriggerImageChangeParams": {
      "description": "DeploymentTriggerImageChangeParams represents the parameters to the ImageChange trigger.",
      "required": [
        "from"
      ],
      "properties": {
        "automatic": {
          "description": "Automatic means that the detection of a new tag value should result in an image update inside the pod template.",
          "type": "boolean"
        },
        "containerNames": {
          "description": "ContainerNames is used to restrict tag updates to the specified set of container names in a pod. If multiple triggers point to the same containers, the resulting behavior is undefined. Future API versions will make this a validation error. If ContainerNames does not point to a valid container, the trigger will be ignored. Future API versions will make this a validation error.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from": {
          "description": "From is a reference to an image stream tag to watch for changes. From.Name is the only required subfield - if From.Namespace is blank, the namespace of the current deployment trigger will be used.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "lastTriggeredImage": {
          "description": "LastTriggeredImage is the last image to be triggered.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.DeploymentTriggerPolicy": {
      "description": "DeploymentTriggerPolicy describes a policy for a single trigger that results in a new deployment.",
      "properties": {
        "imageChangeParams": {
          "description": "ImageChangeParams represents the parameters for the ImageChange trigger.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.DeploymentTriggerImageChangeParams"
        },
        "type": {
          "description": "Type of the trigger",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.ExecNewPodHook": {
      "description": "ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.",
      "required": [
        "command",
        "containerName"
      ],
      "properties": {
        "command": {
          "description": "Command is the action command and its arguments.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "containerName": {
          "description": "ContainerName is the name of a container in the deployment pod template whose container image will be used for the hook pod's container.",
          "type": "string"
        },
        "env": {
          "description": "Env is a set of environment variables to supply to the hook pod's container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "volumes": {
          "description": "Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.LifecycleHook": {
      "description": "LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.",
      "required": [
        "failurePolicy"
      ],
      "properties": {
        "execNewPod": {
          "description": "ExecNewPod specifies the options for a lifecycle hook backed by a pod.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.ExecNewPodHook"
        },
        "failurePolicy": {
          "description": "FailurePolicy specifies what action to take if the hook fails.",
          "type": "string"
        },
        "tagImages": {
          "description": "TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.apps.v1.TagImageHook"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.RecreateDeploymentStrategyParams": {
      "description": "RecreateDeploymentStrategyParams are the input to the Recreate deployment strategy.",
      "properties": {
        "mid": {
          "description": "Mid is a lifecycle hook which is executed while the deployment is scaled down to zero before the first new pod is created. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "post": {
          "description": "Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "pre": {
          "description": "Pre is a lifecycle hook which is executed before the strategy manipulates the deployment. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.RollingDeploymentStrategyParams": {
      "description": "RollingDeploymentStrategyParams are the input to the Rolling deployment strategy.",
      "properties": {
        "intervalSeconds": {
          "description": "IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.",
          "type": "integer",
          "format": "int64"
        },
        "maxSurge": {
          "description": "MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up.\n\nThis cannot be 0 if MaxUnavailable is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "maxUnavailable": {
          "description": "MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down.\n\nThis cannot be 0 if MaxSurge is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "post": {
          "description": "Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "pre": {
          "description": "Pre is a lifecycle hook which is executed before the deployment process begins. All LifecycleHookFailurePolicy values are supported.",
          "$ref": "#/definitions/com.github.openshift.api.apps.v1.LifecycleHook"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.",
          "type": "integer",
          "format": "int64"
        },
        "updatePeriodSeconds": {
          "description": "UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.apps.v1.TagImageHook": {
      "description": "TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.",
      "required": [
        "containerName",
        "to"
      ],
      "properties": {
        "containerName": {
          "description": "ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.",
          "type": "string"
        },
        "to": {
          "description": "To is the target ImageStreamTag to set the container's image onto.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.ClusterRole": {
      "description": "ClusterRole is a logical grouping of PolicyRules that can be referenced as a unit by ClusterRoleBindings.",
      "required": [
        "rules"
      ],
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRole"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterRole",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.ClusterRoleBinding": {
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference any ClusterRole in the same namespace or in the global namespace. It adds who information via (Users and Groups) OR Subjects and namespace information by which namespace it exists in. ClusterRoleBindings in a given namespace only have effect in that namespace (excepting the master namespace which has power in all namespaces).",
      "required": [
        "userNames",
        "groupNames",
        "subjects",
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "groupNames": {
          "description": "GroupNames holds all the groups directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference the current namespace and the global namespace. If the ClusterRoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "subjects": {
          "description": "Subjects hold object references to authorize with this rule. This field is ignored if UserNames or GroupNames are specified to support legacy clients and servers. Thus newer clients that do not need to support backwards compatibility should send only fully qualified Subjects and should omit the UserNames and GroupNames fields. Clients that need to support backwards compatibility can use this field to build the UserNames and GroupNames.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }
        },
        "userNames": {
          "description": "UserNames holds all the usernames directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.ClusterRoleBindingList": {
      "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterRoleBindingList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.ClusterRoleList": {
      "description": "ClusterRoleList is a collection of ClusterRoles",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterRoleList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ClusterRoleList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.GroupRestriction": {
      "description": "GroupRestriction matches a group either by a string match on the group name or a label selector applied to group labels.",
      "required": [
        "groups",
        "labels"
      ],
      "properties": {
        "groups": {
          "description": "Groups is a list of groups used to match against an individual user's groups. If the user is a member of one of the whitelisted groups, the user is allowed to be bound to a role.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Selectors specifies a list of label selectors over group labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.LocalResourceAccessReview": {
      "description": "LocalResourceAccessReview is a means to request a list of which users and groups are authorized to perform the action specified by spec in a particular namespace",
      "required": [
        "namespace",
        "verb",
        "resourceAPIGroup",
        "resourceAPIVersion",
        "resource",
        "resourceName",
        "path",
        "isNonResourceURL"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "content": {
          "description": "Content is the actual content of the request for create and update",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "isNonResourceURL": {
          "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hieraarchy)",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LocalResourceAccessReview"
          ]
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the path of a non resource URL",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types",
          "type": "string"
        },
        "resourceAPIGroup": {
          "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined",
          "type": "string"
        },
        "resourceAPIVersion": {
          "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined",
          "type": "string"
        },
        "resourceName": {
          "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\"",
          "type": "string"
        },
        "verb": {
          "description": "Verb is one of: get, list, watch, create, update, delete",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LocalResourceAccessReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "LocalResourceAccessReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.LocalSubjectAccessReview": {
      "description": "LocalSubjectAccessReview is an object for requesting information about whether a user or group can perform an action in a particular namespace",
      "required": [
        "namespace",
        "verb",
        "resourceAPIGroup",
        "resourceAPIVersion",
        "resource",
        "resourceName",
        "path",
        "isNonResourceURL",
        "user",
        "groups",
        "scopes"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "content": {
          "description": "Content is the actual content of the request for create and update",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "groups": {
          "description": "Groups is optional.  Groups is the list of groups to which the User belongs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isNonResourceURL": {
          "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hieraarchy)",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LocalSubjectAccessReview"
          ]
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the path of a non resource URL",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types",
          "type": "string"
        },
        "resourceAPIGroup": {
          "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined",
          "type": "string"
        },
        "resourceAPIVersion": {
          "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined",
          "type": "string"
        },
        "resourceName": {
          "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\"",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\". Nil for a self-SAR, means \"use the scopes on this request\". Nil for a regular SAR, means the same as empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "description": "User is optional.  If both User and Groups are empty, the current authenticated user is used.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is one of: get, list, watch, create, update, delete",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "required": [
        "verbs",
        "apiGroups",
        "resources"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If this field is empty, then both kubernetes and origin API groups are assumed. That means that if an action is requested against one of the enumerated resources in either the kubernetes or the origin API group, the request will be allowed",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attributeRestrictions": {
          "description": "AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLsSlice is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.ResourceAccessReview": {
      "description": "ResourceAccessReview is a means to request a list of which users and groups are authorized to perform the action specified by spec",
      "required": [
        "namespace",
        "verb",
        "resourceAPIGroup",
        "resourceAPIVersion",
        "resource",
        "resourceName",
        "path",
        "isNonResourceURL"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "content": {
          "description": "Content is the actual content of the request for create and update",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "isNonResourceURL": {
          "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hieraarchy)",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ResourceAccessReview"
          ]
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the path of a non resource URL",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types",
          "type": "string"
        },
        "resourceAPIGroup": {
          "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined",
          "type": "string"
        },
        "resourceAPIVersion": {
          "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined",
          "type": "string"
        },
        "resourceName": {
          "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\"",
          "type": "string"
        },
        "verb": {
          "description": "Verb is one of: get, list, watch, create, update, delete",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceAccessReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "ResourceAccessReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.Role": {
      "description": "Role is a logical grouping of PolicyRules that can be referenced as a unit by RoleBindings.",
      "required": [
        "rules"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Role"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Role",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "Role",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.RoleBinding": {
      "description": "RoleBinding references a Role, but not contain it.  It can reference any Role in the same namespace or in the global namespace. It adds who information via (Users and Groups) OR Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace (excepting the master namespace which has power in all namespaces).",
      "required": [
        "userNames",
        "groupNames",
        "subjects",
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "groupNames": {
          "description": "GroupNames holds all the groups directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference the current namespace and the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. Since Policy is a singleton, this is sufficient knowledge to locate a role.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "subjects": {
          "description": "Subjects hold object references to authorize with this rule. This field is ignored if UserNames or GroupNames are specified to support legacy clients and servers. Thus newer clients that do not need to support backwards compatibility should send only fully qualified Subjects and should omit the UserNames and GroupNames fields. Clients that need to support backwards compatibility can use this field to build the UserNames and GroupNames.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }
        },
        "userNames": {
          "description": "UserNames holds all the usernames directly bound to the role. This field should only be specified when supporting legacy clients and servers. See Subjects for further details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RoleBinding",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.RoleBindingList": {
      "description": "RoleBindingList is a collection of RoleBindings",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RoleBindingList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "RoleBindingList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.RoleBindingRestriction": {
      "description": "RoleBindingRestriction is an object that can be matched against a subject (user, group, or service account) to determine whether rolebindings on that subject are allowed in the namespace to which the RoleBindingRestriction belongs.  If any one of those RoleBindingRestriction objects matches a subject, rolebindings on that subject in the namespace are allowed.",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingRestriction"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the matcher.",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.RoleBindingRestrictionSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RoleBindingRestriction",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "RoleBindingRestriction",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.RoleBindingRestrictionList": {
      "description": "RoleBindingRestrictionList is a collection of RoleBindingRestriction objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of RoleBindingRestriction objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.RoleBindingRestriction"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingRestrictionList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RoleBindingRestrictionList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "RoleBindingRestrictionList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.RoleBindingRestrictionSpec": {
      "description": "RoleBindingRestrictionSpec defines a rolebinding restriction.  Exactly one field must be non-nil.",
      "required": [
        "userrestriction",
        "grouprestriction",
        "serviceaccountrestriction"
      ],
      "properties": {
        "grouprestriction": {
          "description": "GroupRestriction matches against group subjects.",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.GroupRestriction"
        },
        "serviceaccountrestriction": {
          "description": "ServiceAccountRestriction matches against service-account subjects.",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.ServiceAccountRestriction"
        },
        "userrestriction": {
          "description": "UserRestriction matches against user subjects.",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.UserRestriction"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.RoleList": {
      "description": "RoleList is a collection of Roles",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RoleList",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "RoleList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.SelfSubjectRulesReview": {
      "description": "SelfSubjectRulesReview is a resource you can create to determine which actions you can perform in a namespace",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectRulesReview"
          ]
        },
        "spec": {
          "description": "Spec adds information about how to conduct the check",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.SelfSubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is completed by the server to tell which permissions you have",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.SubjectRulesReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "description": "SelfSubjectRulesReviewSpec adds information about how to conduct the check",
      "required": [
        "scopes"
      ],
      "properties": {
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\". Nil means \"use the scopes on this request\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.ServiceAccountReference": {
      "description": "ServiceAccountReference specifies a service account and namespace by their names.",
      "required": [
        "name",
        "namespace"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the service account.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the service account.  Service accounts from inside the whitelisted namespaces are allowed to be bound to roles.  If Namespace is empty, then the namespace of the RoleBindingRestriction in which the ServiceAccountReference is embedded is used.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.ServiceAccountRestriction": {
      "description": "ServiceAccountRestriction matches a service account by a string match on either the service-account name or the name of the service account's namespace.",
      "required": [
        "serviceaccounts",
        "namespaces"
      ],
      "properties": {
        "namespaces": {
          "description": "Namespaces specifies a list of literal namespace names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceaccounts": {
          "description": "ServiceAccounts specifies a list of literal service-account names.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.ServiceAccountReference"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.SubjectAccessReview": {
      "description": "SubjectAccessReview is an object for requesting information about whether a user or group can perform an action",
      "required": [
        "namespace",
        "verb",
        "resourceAPIGroup",
        "resourceAPIVersion",
        "resource",
        "resourceName",
        "path",
        "isNonResourceURL",
        "user",
        "groups",
        "scopes"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "content": {
          "description": "Content is the actual content of the request for create and update",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "groups": {
          "description": "GroupsSlice is optional. Groups is the list of groups to which the User belongs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isNonResourceURL": {
          "description": "IsNonResourceURL is true if this is a request for a non-resource URL (outside of the resource hieraarchy)",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubjectAccessReview"
          ]
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the path of a non resource URL",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types",
          "type": "string"
        },
        "resourceAPIGroup": {
          "description": "Group is the API group of the resource Serialized as resourceAPIGroup to avoid confusion with the 'groups' field when inlined",
          "type": "string"
        },
        "resourceAPIVersion": {
          "description": "Version is the API version of the resource Serialized as resourceAPIVersion to avoid confusion with TypeMeta.apiVersion and ObjectMeta.resourceVersion when inlined",
          "type": "string"
        },
        "resourceName": {
          "description": "ResourceName is the name of the resource being requested for a \"get\" or deleted for a \"delete\"",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\". Nil for a self-SAR, means \"use the scopes on this request\". Nil for a regular SAR, means the same as empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "description": "User is optional. If both User and Groups are empty, the current authenticated user is used.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is one of: get, list, watch, create, update, delete",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SubjectAccessReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.SubjectRulesReview": {
      "description": "SubjectRulesReview is a resource you can create to determine which actions another user can perform in a namespace",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "authorization.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubjectRulesReview"
          ]
        },
        "spec": {
          "description": "Spec adds information about how to conduct the check",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.SubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is completed by the server to tell which permissions you have",
          "$ref": "#/definitions/com.github.openshift.api.authorization.v1.SubjectRulesReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SubjectRulesReview",
          "version": "v1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "SubjectRulesReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.SubjectRulesReviewSpec": {
      "description": "SubjectRulesReviewSpec adds information about how to conduct the check",
      "required": [
        "user",
        "groups",
        "scopes"
      ],
      "properties": {
        "groups": {
          "description": "Groups is optional.  Groups is the list of groups to which the User belongs.  At least one of User and Groups must be specified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scopes": {
          "description": "Scopes to use for the evaluation.  Empty means \"use the unscoped (full) permissions of the user/groups\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "description": "User is optional.  At least one of User and Groups must be specified.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.SubjectRulesReviewStatus": {
      "description": "SubjectRulesReviewStatus is contains the result of a rules check",
      "required": [
        "rules"
      ],
      "properties": {
        "evaluationError": {
          "description": "EvaluationError can appear in combination with Rules.  It means some error happened during evaluation that may have prevented additional rules from being populated.",
          "type": "string"
        },
        "rules": {
          "description": "Rules is the list of rules (no particular sort) that are allowed for the subject",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.authorization.v1.PolicyRule"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.authorization.v1.UserRestriction": {
      "description": "UserRestriction matches a user either by a string match on the user name, a string match on the name of a group to which the user belongs, or a label selector applied to the user labels.",
      "required": [
        "users",
        "groups",
        "labels"
      ],
      "properties": {
        "groups": {
          "description": "Groups specifies a list of literal group names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Selectors specifies a list of label selectors over user labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        },
        "users": {
          "description": "Users specifies a list of literal user names.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BinaryBuildSource": {
      "description": "BinaryBuildSource describes a binary file to be used for the Docker and Source build strategies, where the file will be extracted and used as the build source.",
      "properties": {
        "asFile": {
          "description": "asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying \"webapp.war\" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be '..' or '.'.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BitbucketWebHookCause": {
      "description": "BitbucketWebHookCause has information about a Bitbucket webhook that triggered a build.",
      "properties": {
        "revision": {
          "description": "Revision is the git source revision information of the trigger.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "secret": {
          "description": "Secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.Build": {
      "description": "Build encapsulates the inputs needed to produce a new deployable image, as well as the status of the execution and a reference to the Pod which executed the build.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Build"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is all the inputs used to execute the build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildSpec"
        },
        "status": {
          "description": "status is the current status of the build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Build",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "Build",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildConfig": {
      "description": "Build configurations define a build process for new container images. There are three types of builds possible - a container image build using a Dockerfile, a Source-to-Image build that uses a specially prepared base image that accepts source code that it can make runnable, and a custom build that can run // arbitrary container images as a base and accept the build parameters. Builds run on the cluster and on completion are pushed to the container image registry specified in the \"output\" section. A build can be triggered via a webhook, when the base image changes, or when a user manually requests a new build be // created.\n\nEach build created by a build configuration is numbered and refers back to its parent configuration. Multiple builds can be triggered at once. Builds that do not have \"output\" set can be used to test code or run a verification build.",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildConfig"
          ]
        },
        "metadata": {
          "description": "metadata for BuildConfig.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec holds all the input necessary to produce a new build, and the conditions when to trigger them.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildConfigSpec"
        },
        "status": {
          "description": "status holds any relevant information about a build config",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildConfigStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildConfig",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildConfig",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildConfigList": {
      "description": "BuildConfigList is a collection of BuildConfigs.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of build configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildConfigList"
          ]
        },
        "metadata": {
          "description": "metadata for BuildConfigList.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildConfigList",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildConfigList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildConfigSpec": {
      "description": "BuildConfigSpec describes when and how builds are created",
      "required": [
        "triggers",
        "strategy",
        "nodeSelector"
      ],
      "properties": {
        "completionDeadlineSeconds": {
          "description": "completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer",
          "type": "integer",
          "format": "int64"
        },
        "failedBuildsHistoryLimit": {
          "description": "failedBuildsHistoryLimit is the number of old failed builds to retain. If not specified, all failed builds are retained.",
          "type": "integer",
          "format": "int32"
        },
        "nodeSelector": {
          "description": "nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "output": {
          "description": "output describes the container image the Strategy should produce.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildOutput"
        },
        "postCommit": {
          "description": "postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildPostCommitSpec"
        },
        "resources": {
          "description": "resources computes resource requirements to execute the build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "revision": {
          "description": "revision is the information from the source for a specific repo snapshot. This is optional.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "runPolicy": {
          "description": "RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to \"Serial\".",
          "type": "string"
        },
        "serviceAccount": {
          "description": "serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount",
          "type": "string"
        },
        "source": {
          "description": "source describes the SCM in use.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildSource"
        },
        "strategy": {
          "description": "strategy defines how to perform a build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStrategy"
        },
        "successfulBuildsHistoryLimit": {
          "description": "successfulBuildsHistoryLimit is the number of old successful builds to retain. If not specified, all successful builds are retained.",
          "type": "integer",
          "format": "int32"
        },
        "triggers": {
          "description": "triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildTriggerPolicy"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildConfigStatus": {
      "description": "BuildConfigStatus contains current state of the build config object.",
      "required": [
        "lastVersion"
      ],
      "properties": {
        "lastVersion": {
          "description": "lastVersion is used to inform about number of last triggered build.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildList": {
      "description": "BuildList is a collection of Builds.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of builds",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.Build"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildList"
          ]
        },
        "metadata": {
          "description": "metadata for BuildList.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildList",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildLog": {
      "description": "BuildLog is the (unused) resource associated with the build log redirector",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildLog"
          ]
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildLog",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildLog",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildOutput": {
      "description": "BuildOutput is input to a build strategy and describes the container image that the strategy should produce.",
      "properties": {
        "imageLabels": {
          "description": "imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageLabel"
          }
        },
        "pushSecret": {
          "description": "PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub).",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "to": {
          "description": "to defines an optional location to push the output of this build to. Kind must be one of 'ImageStreamTag' or 'DockerImage'. This value will be used to look up a container image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildPostCommitSpec": {
      "description": "A BuildPostCommitSpec holds a build post commit hook specification. The hook executes a command in a temporary container running the build output image, immediately after the last layer of the image is committed and before the image is pushed to a registry. The command is executed with the current working directory ($PWD) set to the image's WORKDIR.\n\nThe build will be marked as failed if the hook execution fails. It will fail if the script or command return a non-zero exit code, or if there is any other error related to starting the temporary container.\n\nThere are five different ways to configure the hook. As an example, all forms below are equivalent and will execute `rake test --verbose`.\n\n1. Shell script:\n\n       \"postCommit\": {\n         \"script\": \"rake test --verbose\",\n       }\n\n    The above is a convenient form which is equivalent to:\n\n       \"postCommit\": {\n         \"command\": [\"/bin/sh\", \"-ic\"],\n         \"args\":    [\"rake test --verbose\"]\n       }\n\n2. A command as the image entrypoint:\n\n       \"postCommit\": {\n         \"commit\": [\"rake\", \"test\", \"--verbose\"]\n       }\n\n    Command overrides the image entrypoint in the exec form, as documented in\n    Docker: https://docs.docker.com/engine/reference/builder/#entrypoint.\n\n3. Pass arguments to the default entrypoint:\n\n       \"postCommit\": {\n\t\t      \"args\": [\"rake\", \"test\", \"--verbose\"]\n\t      }\n\n    This form is only useful if the image entrypoint can handle arguments.\n\n4. Shell script with arguments:\n\n       \"postCommit\": {\n         \"script\": \"rake test $1\",\n         \"args\":   [\"--verbose\"]\n       }\n\n    This form is useful if you need to pass arguments that would otherwise be\n    hard to quote properly in the shell script. In the script, $0 will be\n    \"/bin/sh\" and $1, $2, etc, are the positional arguments from Args.\n\n5. Command with arguments:\n\n       \"postCommit\": {\n         \"command\": [\"rake\", \"test\"],\n         \"args\":    [\"--verbose\"]\n       }\n\n    This form is equivalent to appending the arguments to the Command slice.\n\nIt is invalid to provide both Script and Command simultaneously. If none of the fields are specified, the hook is not executed.",
      "properties": {
        "args": {
          "description": "args is a list of arguments that are provided to either Command, Script or the container image's default entrypoint. The arguments are placed immediately after the command to be run.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "script": {
          "description": "script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildRequest": {
      "description": "BuildRequest is the resource used to pass parameters to build generator",
      "required": [
        "triggeredBy"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "build.openshift.io/v1"
          ]
        },
        "binary": {
          "description": "binary indicates a request to build from a binary provided to the builder",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BinaryBuildSource"
        },
        "dockerStrategyOptions": {
          "description": "DockerStrategyOptions contains additional docker-strategy specific options for the build",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.DockerStrategyOptions"
        },
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "from": {
          "description": "from is the reference to the ImageStreamTag that triggered the build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BuildRequest"
          ]
        },
        "lastVersion": {
          "description": "lastVersion (optional) is the LastVersion of the BuildConfig that was used to generate the build. If the BuildConfig in the generator doesn't match, a build will not be generated.",
          "type": "integer",
          "format": "int64"
        },
        "metadata": {
          "description": "metadata for BuildRequest.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "revision is the information from the source for a specific repo snapshot.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "sourceStrategyOptions": {
          "description": "SourceStrategyOptions contains additional source-strategy specific options for the build",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceStrategyOptions"
        },
        "triggeredBy": {
          "description": "triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildTriggerCause"
          }
        },
        "triggeredByImage": {
          "description": "triggeredByImage is the Image that triggered this build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "BuildRequest",
          "version": "v1"
        },
        {
          "group": "build.openshift.io",
          "kind": "BuildRequest",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildSource": {
      "description": "BuildSource is the SCM used for the build.",
      "required": [
        "type"
      ],
      "properties": {
        "binary": {
          "description": "binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For container image builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and container image builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BinaryBuildSource"
        },
        "configMaps": {
          "description": "configMaps represents a list of configMaps and their destinations that will be used for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.ConfigMapBuildSource"
          }
        },
        "contextDir": {
          "description": "contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.",
          "type": "string"
        },
        "dockerfile": {
          "description": "dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.",
          "type": "string"
        },
        "git": {
          "description": "git contains optional information about git build source",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GitBuildSource"
        },
        "images": {
          "description": "images describes a set of images to be used to provide source for the build",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageSource"
          }
        },
        "secrets": {
          "description": "secrets represents a list of secrets and their destinations that will be used only for the build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.SecretBuildSource"
          }
        },
        "sourceSecret": {
          "description": "sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "type": {
          "description": "type of build input to accept",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildSpec": {
      "description": "BuildSpec has the information to represent a build and also additional information about a build",
      "required": [
        "strategy",
        "nodeSelector",
        "triggeredBy"
      ],
      "properties": {
        "completionDeadlineSeconds": {
          "description": "completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer",
          "type": "integer",
          "format": "int64"
        },
        "nodeSelector": {
          "description": "nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "output": {
          "description": "output describes the container image the Strategy should produce.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildOutput"
        },
        "postCommit": {
          "description": "postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildPostCommitSpec"
        },
        "resources": {
          "description": "resources computes resource requirements to execute the build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "revision": {
          "description": "revision is the information from the source for a specific repo snapshot. This is optional.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "serviceAccount": {
          "description": "serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount",
          "type": "string"
        },
        "source": {
          "description": "source describes the SCM in use.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildSource"
        },
        "strategy": {
          "description": "strategy defines how to perform a build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStrategy"
        },
        "triggeredBy": {
          "description": "triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildTriggerCause"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildStatus": {
      "description": "BuildStatus contains the status of a build",
      "required": [
        "phase"
      ],
      "properties": {
        "cancelled": {
          "description": "cancelled describes if a cancel event was triggered for the build.",
          "type": "boolean"
        },
        "completionTimestamp": {
          "description": "completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "config": {
          "description": "config is an ObjectReference to the BuildConfig this Build is based on.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "duration": {
          "description": "duration contains time.Duration object describing build time.",
          "type": "integer",
          "format": "int64"
        },
        "logSnippet": {
          "description": "logSnippet is the last few lines of the build log.  This value is only set for builds that failed.",
          "type": "string"
        },
        "message": {
          "description": "message is a human-readable message indicating details about why the build has this status.",
          "type": "string"
        },
        "output": {
          "description": "output describes the container image the build has produced.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStatusOutput"
        },
        "outputDockerImageReference": {
          "description": "outputDockerImageReference contains a reference to the container image that will be built by this build. Its value is computed from Build.Spec.Output.To, and should include the registry address, so that it can be used to push and pull the image.",
          "type": "string"
        },
        "phase": {
          "description": "phase is the point in the build lifecycle. Possible values are \"New\", \"Pending\", \"Running\", \"Complete\", \"Failed\", \"Error\", and \"Cancelled\".",
          "type": "string"
        },
        "reason": {
          "description": "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        },
        "stages": {
          "description": "stages contains details about each stage that occurs during the build including start time, duration (in milliseconds), and the steps that occured within each stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.StageInfo"
          }
        },
        "startTimestamp": {
          "description": "startTimestamp is a timestamp representing the server time when this Build started running in a Pod. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildStatusOutput": {
      "description": "BuildStatusOutput contains the status of the built image.",
      "properties": {
        "to": {
          "description": "to describes the status of the built image being pushed to a registry.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BuildStatusOutputTo"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildStatusOutputTo": {
      "description": "BuildStatusOutputTo describes the status of the built image with regards to image registry to which it was supposed to be pushed.",
      "properties": {
        "imageDigest": {
          "description": "imageDigest is the digest of the built container image. The digest uniquely identifies the image in the registry to which it was pushed.\n\nPlease note that this field may not always be set even if the push completes successfully - e.g. when the registry returns no digest or returns it in a format that the builder doesn't understand.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildStrategy": {
      "description": "BuildStrategy contains the details of how to perform a build.",
      "required": [
        "type"
      ],
      "properties": {
        "customStrategy": {
          "description": "customStrategy holds the parameters to the Custom build strategy",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.CustomBuildStrategy"
        },
        "dockerStrategy": {
          "description": "dockerStrategy holds the parameters to the container image build strategy.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.DockerBuildStrategy"
        },
        "jenkinsPipelineStrategy": {
          "description": "JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.JenkinsPipelineBuildStrategy"
        },
        "sourceStrategy": {
          "description": "sourceStrategy holds the parameters to the Source build strategy.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceBuildStrategy"
        },
        "type": {
          "description": "type is the kind of build strategy.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildTriggerCause": {
      "description": "BuildTriggerCause holds information about a triggered build. It is used for displaying build trigger data for each build and build configuration in oc describe. It is also used to describe which triggers led to the most recent update in the build configuration.",
      "properties": {
        "bitbucketWebHook": {
          "description": "BitbucketWebHook represents data for a Bitbucket webhook that fired a specific build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.BitbucketWebHookCause"
        },
        "genericWebHook": {
          "description": "genericWebHook holds data about a builds generic webhook trigger.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GenericWebHookCause"
        },
        "githubWebHook": {
          "description": "gitHubWebHook represents data for a GitHub webhook that fired a specific build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GitHubWebHookCause"
        },
        "gitlabWebHook": {
          "description": "GitLabWebHook represents data for a GitLab webhook that fired a specific build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GitLabWebHookCause"
        },
        "imageChangeBuild": {
          "description": "imageChangeBuild stores information about an imagechange event that triggered a new build.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageChangeCause"
        },
        "message": {
          "description": "message is used to store a human readable message for why the build was triggered. E.g.: \"Manually triggered by user\", \"Configuration change\",etc.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.BuildTriggerPolicy": {
      "description": "BuildTriggerPolicy describes a policy for a single trigger that results in a new Build.",
      "required": [
        "type"
      ],
      "properties": {
        "bitbucket": {
          "description": "BitbucketWebHook contains the parameters for a Bitbucket webhook type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.WebHookTrigger"
        },
        "generic": {
          "description": "generic contains the parameters for a Generic webhook type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.WebHookTrigger"
        },
        "github": {
          "description": "github contains the parameters for a GitHub webhook type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.WebHookTrigger"
        },
        "gitlab": {
          "description": "GitLabWebHook contains the parameters for a GitLab webhook type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.WebHookTrigger"
        },
        "imageChange": {
          "description": "imageChange contains parameters for an ImageChange type of trigger",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageChangeTrigger"
        },
        "type": {
          "description": "type is the type of build trigger",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.ConfigMapBuildSource": {
      "description": "ConfigMapBuildSource describes a configmap and its destination directory that will be used only at the build time. The content of the configmap referenced here will be copied into the destination directory instead of mounting.",
      "required": [
        "configMap"
      ],
      "properties": {
        "configMap": {
          "description": "configMap is a reference to an existing configmap that you want to use in your build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "destinationDir": {
          "description": "destinationDir is the directory where the files from the configmap should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.CustomBuildStrategy": {
      "description": "CustomBuildStrategy defines input parameters specific to Custom build.",
      "required": [
        "from"
      ],
      "properties": {
        "buildAPIVersion": {
          "description": "buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder",
          "type": "string"
        },
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "exposeDockerSocket": {
          "description": "exposeDockerSocket will allow running Docker commands (and build container images) from inside the container.",
          "type": "boolean"
        },
        "forcePull": {
          "description": "forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally",
          "type": "boolean"
        },
        "from": {
          "description": "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "pullSecret": {
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "secrets": {
          "description": "secrets is a list of additional secrets that will be included in the build pod",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.SecretSpec"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.DockerBuildStrategy": {
      "description": "DockerBuildStrategy defines input parameters specific to container image build.",
      "properties": {
        "buildArgs": {
          "description": "buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "dockerfilePath": {
          "description": "dockerfilePath is the path of the Dockerfile that will be used to build the container image, relative to the root of the context (contextDir).",
          "type": "string"
        },
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "forcePull": {
          "description": "forcePull describes if the builder should pull the images from registry prior to building.",
          "type": "boolean"
        },
        "from": {
          "description": "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled the resulting image will be used in the FROM line of the Dockerfile for this build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "imageOptimizationPolicy": {
          "description": "imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is 'None' which means the final build image will be equivalent to an image created by the container image build API. The experimental policy 'SkipLayers' will avoid commiting new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the 'None' policy. An additional experimental policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply warns if compatibility cannot be preserved.",
          "type": "string"
        },
        "noCache": {
          "description": "noCache if set to true indicates that the container image build must be executed with the --no-cache=true flag",
          "type": "boolean"
        },
        "pullSecret": {
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.DockerStrategyOptions": {
      "description": "DockerStrategyOptions contains extra strategy options for container image builds",
      "properties": {
        "buildArgs": {
          "description": "Args contains any build arguments that are to be passed to Docker.  See https://docs.docker.com/engine/reference/builder/#/arg for more details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "noCache": {
          "description": "noCache overrides the docker-strategy noCache option in the build config",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.GenericWebHookCause": {
      "description": "GenericWebHookCause holds information about a generic WebHook that triggered a build.",
      "properties": {
        "revision": {
          "description": "revision is an optional field that stores the git source revision information of the generic webhook trigger when it is available.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "secret": {
          "description": "secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.GitBuildSource": {
      "description": "GitBuildSource defines the parameters of a Git SCM",
      "required": [
        "uri"
      ],
      "properties": {
        "httpProxy": {
          "description": "httpProxy is a proxy used to reach the git repository over http",
          "type": "string"
        },
        "httpsProxy": {
          "description": "httpsProxy is a proxy used to reach the git repository over https",
          "type": "string"
        },
        "noProxy": {
          "description": "noProxy is the list of domains for which the proxy should not be used",
          "type": "string"
        },
        "ref": {
          "description": "ref is the branch/tag/ref to build.",
          "type": "string"
        },
        "uri": {
          "description": "uri points to the source that will be built. The structure of the source will depend on the type of build to run",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.GitHubWebHookCause": {
      "description": "GitHubWebHookCause has information about a GitHub webhook that triggered a build.",
      "properties": {
        "revision": {
          "description": "revision is the git revision information of the trigger.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "secret": {
          "description": "secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.GitLabWebHookCause": {
      "description": "GitLabWebHookCause has information about a GitLab webhook that triggered a build.",
      "properties": {
        "revision": {
          "description": "Revision is the git source revision information of the trigger.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceRevision"
        },
        "secret": {
          "description": "Secret is the obfuscated webhook secret that triggered a build.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.GitSourceRevision": {
      "description": "GitSourceRevision is the commit information from a git source for a build",
      "properties": {
        "author": {
          "description": "author is the author of a specific commit",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceControlUser"
        },
        "commit": {
          "description": "commit is the commit hash identifying a specific commit",
          "type": "string"
        },
        "committer": {
          "description": "committer is the committer of a specific commit",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SourceControlUser"
        },
        "message": {
          "description": "message is the description of a specific commit",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.ImageChangeCause": {
      "description": "ImageChangeCause contains information about the image that triggered a build",
      "properties": {
        "fromRef": {
          "description": "fromRef contains detailed information about an image that triggered a build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "imageID": {
          "description": "imageID is the ID of the image that triggered a a new build.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.ImageChangeTrigger": {
      "description": "ImageChangeTrigger allows builds to be triggered when an ImageStream changes",
      "properties": {
        "from": {
          "description": "from is a reference to an ImageStreamTag that will trigger a build when updated It is optional. If no From is specified, the From image from the build strategy will be used. Only one ImageChangeTrigger with an empty From reference is allowed in a build configuration.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "lastTriggeredImageID": {
          "description": "lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build",
          "type": "string"
        },
        "paused": {
          "description": "paused is true if this trigger is temporarily disabled. Optional.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.ImageLabel": {
      "description": "ImageLabel represents a label applied to the resulting image.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name defines the name of the label. It must have non-zero length.",
          "type": "string"
        },
        "value": {
          "description": "value defines the literal value of the label.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.ImageSource": {
      "description": "ImageSource is used to describe build source that will be extracted from an image or used during a multi stage build. A reference of type ImageStreamTag, ImageStreamImage or DockerImage may be used. A pull secret can be specified to pull the image from an external registry or override the default service account secret if pulling from the internal registry. Image sources can either be used to extract content from an image and place it into the build context along with the repository source, or used directly during a multi-stage container image build to allow content to be copied without overwriting the contents of the repository source (see the 'paths' and 'as' fields).",
      "required": [
        "from"
      ],
      "properties": {
        "as": {
          "description": "A list of image names that this source will be used in place of during a multi-stage container image build. For instance, a Dockerfile that uses \"COPY --from=nginx:latest\" will first check for an image source that has \"nginx:latest\" in this field before attempting to pull directly. If the Dockerfile does not reference an image source it is ignored. This field and paths may both be set, in which case the contents will be used twice.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from": {
          "description": "from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "paths": {
          "description": "paths is a list of source and destination paths to copy from the image. This content will be copied into the build context prior to starting the build. If no paths are set, the build context will not be altered.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.ImageSourcePath"
          }
        },
        "pullSecret": {
          "description": "pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.ImageSourcePath": {
      "description": "ImageSourcePath describes a path to be copied from a source image and its destination within the build directory.",
      "required": [
        "sourcePath",
        "destinationDir"
      ],
      "properties": {
        "destinationDir": {
          "description": "destinationDir is the relative directory within the build directory where files copied from the image are placed.",
          "type": "string"
        },
        "sourcePath": {
          "description": "sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.  If the source path ends in /. then the content of the directory will be copied, but the directory itself will not be created at the destination.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.JenkinsPipelineBuildStrategy": {
      "description": "JenkinsPipelineBuildStrategy holds parameters specific to a Jenkins Pipeline build.",
      "properties": {
        "env": {
          "description": "env contains additional environment variables you want to pass into a build pipeline.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "jenkinsfile": {
          "description": "Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.",
          "type": "string"
        },
        "jenkinsfilePath": {
          "description": "JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.SecretBuildSource": {
      "description": "SecretBuildSource describes a secret and its destination directory that will be used only at the build time. The content of the secret referenced here will be copied into the destination directory instead of mounting.",
      "required": [
        "secret"
      ],
      "properties": {
        "destinationDir": {
          "description": "destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.",
          "type": "string"
        },
        "secret": {
          "description": "secret is a reference to an existing secret that you want to use in your build.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.SecretLocalReference": {
      "description": "SecretLocalReference contains information that points to the local secret being used",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the resource in the same namespace being referenced",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.SecretSpec": {
      "description": "SecretSpec specifies a secret to be included in a build pod and its corresponding mount point",
      "required": [
        "secretSource",
        "mountPath"
      ],
      "properties": {
        "mountPath": {
          "description": "mountPath is the path at which to mount the secret",
          "type": "string"
        },
        "secretSource": {
          "description": "secretSource is a reference to the secret",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.SourceBuildStrategy": {
      "description": "SourceBuildStrategy defines input parameters specific to an Source build.",
      "required": [
        "from"
      ],
      "properties": {
        "env": {
          "description": "env contains additional environment variables you want to pass into a builder container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "forcePull": {
          "description": "forcePull describes if the builder should pull the images from registry prior to building.",
          "type": "boolean"
        },
        "from": {
          "description": "from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "incremental": {
          "description": "incremental flag forces the Source build to do incremental builds if true.",
          "type": "boolean"
        },
        "pullSecret": {
          "description": "pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "scripts": {
          "description": "scripts is the location of Source scripts",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.SourceControlUser": {
      "description": "SourceControlUser defines the identity of a user of source control",
      "properties": {
        "email": {
          "description": "email of the source control user",
          "type": "string"
        },
        "name": {
          "description": "name of the source control user",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.SourceRevision": {
      "description": "SourceRevision is the revision or commit information from the source for the build",
      "required": [
        "type"
      ],
      "properties": {
        "git": {
          "description": "Git contains information about git-based build source",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.GitSourceRevision"
        },
        "type": {
          "description": "type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.SourceStrategyOptions": {
      "description": "SourceStrategyOptions contains extra strategy options for Source builds",
      "properties": {
        "incremental": {
          "description": "incremental overrides the source-strategy incremental option in the build config",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.StageInfo": {
      "description": "StageInfo contains details about a build stage.",
      "properties": {
        "durationMilliseconds": {
          "description": "durationMilliseconds identifies how long the stage took to complete in milliseconds. Note: the duration of a stage can exceed the sum of the duration of the steps within the stage as not all actions are accounted for in explicit build steps.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "name is a unique identifier for each build stage that occurs.",
          "type": "string"
        },
        "startTime": {
          "description": "startTime is a timestamp representing the server time when this Stage started. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "steps": {
          "description": "steps contains details about each step that occurs during a build stage including start time and duration in milliseconds.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.build.v1.StepInfo"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.StepInfo": {
      "description": "StepInfo contains details about a build step.",
      "properties": {
        "durationMilliseconds": {
          "description": "durationMilliseconds identifies how long the step took to complete in milliseconds.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "name is a unique identifier for each build step.",
          "type": "string"
        },
        "startTime": {
          "description": "startTime is a timestamp representing the server time when this Step started. it is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.build.v1.WebHookTrigger": {
      "description": "WebHookTrigger is a trigger that gets invoked using a webhook type of post",
      "properties": {
        "allowEnv": {
          "description": "allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.",
          "type": "boolean"
        },
        "secret": {
          "description": "secret used to validate requests. Deprecated: use SecretReference instead.",
          "type": "string"
        },
        "secretReference": {
          "description": "secretReference is a reference to a secret in the same namespace, containing the value to be validated when the webhook is invoked. The secret being referenced must contain a key named \"WebHookSecretKey\", the value of which will be checked against the value supplied in the webhook invocation.",
          "$ref": "#/definitions/com.github.openshift.api.build.v1.SecretLocalReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.Image": {
      "description": "Image is an immutable representation of a container image and metadata at a point in time.",
      "required": [
        "dockerImageLayers"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "dockerImageConfig": {
          "description": "DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.",
          "type": "string"
        },
        "dockerImageLayers": {
          "description": "DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageLayer"
          }
        },
        "dockerImageManifest": {
          "description": "DockerImageManifest is the raw JSON of the manifest",
          "type": "string"
        },
        "dockerImageManifestMediaType": {
          "description": "DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.",
          "type": "string"
        },
        "dockerImageMetadata": {
          "description": "DockerImageMetadata contains metadata about this image",
          "x-kubernetes-patch-strategy": "replace",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "dockerImageMetadataVersion": {
          "description": "DockerImageMetadataVersion conveys the version of the object, which if empty defaults to \"1.0\"",
          "type": "string"
        },
        "dockerImageReference": {
          "description": "DockerImageReference is the string that can be used to pull this image.",
          "type": "string"
        },
        "dockerImageSignatures": {
          "description": "DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Image"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "signatures": {
          "description": "Signatures holds all signatures of the image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageSignature"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Image",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "Image",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageBlobReferences": {
      "description": "ImageBlobReferences describes the blob references within an image.",
      "properties": {
        "config": {
          "description": "config, if set, is the blob that contains the image config. Some images do not have separate config blobs and this field will be set to nil if so.",
          "type": "string"
        },
        "imageMissing": {
          "description": "imageMissing is true if the image is referenced by the image stream but the image object has been deleted from the API by an administrator. When this field is set, layers and config fields may be empty and callers that depend on the image metadata should consider the image to be unavailable for download or viewing.",
          "type": "boolean"
        },
        "layers": {
          "description": "layers is the list of blobs that compose this image, from base layer to top layer. All layers referenced by this array will be defined in the blobs map. Some images may have zero layers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageImportSpec": {
      "description": "ImageImportSpec describes a request to import a specific image.",
      "required": [
        "from"
      ],
      "properties": {
        "from": {
          "description": "From is the source of an image to import; only kind DockerImage is allowed",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "importPolicy": {
          "description": "ImportPolicy is the policy controlling how the image is imported",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagImportPolicy"
        },
        "includeManifest": {
          "description": "IncludeManifest determines if the manifest for each image is returned in the response",
          "type": "boolean"
        },
        "referencePolicy": {
          "description": "ReferencePolicy defines how other components should consume the image",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReferencePolicy"
        },
        "to": {
          "description": "To is a tag in the current image stream to assign the imported image to, if name is not specified the default tag from from.name will be used",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageImportStatus": {
      "description": "ImageImportStatus describes the result of an image import.",
      "required": [
        "status"
      ],
      "properties": {
        "image": {
          "description": "Image is the metadata of that image, if the image was located",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "status": {
          "description": "Status is the status of the image import, including errors encountered while retrieving the image",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        },
        "tag": {
          "description": "Tag is the tag this image was located under, if any",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageLayer": {
      "description": "ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.",
      "required": [
        "name",
        "size",
        "mediaType"
      ],
      "properties": {
        "mediaType": {
          "description": "MediaType of the referenced object.",
          "type": "string"
        },
        "name": {
          "description": "Name of the layer as defined by the underlying store.",
          "type": "string"
        },
        "size": {
          "description": "Size of the layer in bytes as defined by the underlying store.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageLayerData": {
      "description": "ImageLayerData contains metadata about an image layer.",
      "required": [
        "size",
        "mediaType"
      ],
      "properties": {
        "mediaType": {
          "description": "MediaType of the referenced object.",
          "type": "string"
        },
        "size": {
          "description": "Size of the layer in bytes as defined by the underlying store. This field is optional if the necessary information about size is not available.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageList": {
      "description": "ImageList is a list of Image objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of images",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageList",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageLookupPolicy": {
      "description": "ImageLookupPolicy describes how an image stream can be used to override the image references used by pods, builds, and other resources in a namespace.",
      "required": [
        "local"
      ],
      "properties": {
        "local": {
          "description": "local will change the docker short image references (like \"mysql\" or \"php:latest\") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag's referencePolicy is taken into account on the replaced value. Only works within the current namespace.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageSignature": {
      "description": "ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.",
      "required": [
        "type",
        "content"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "conditions": {
          "description": "Conditions represent the latest available observations of a signature's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.SignatureCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "content": {
          "description": "Required: An opaque binary string which is an image's signature.",
          "type": "string",
          "format": "byte"
        },
        "created": {
          "description": "If specified, it is the time of signature's creation.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "imageIdentity": {
          "description": "A human readable string representing image's identity. It could be a product name and version, or an image pull spec (e.g. \"registry.access.redhat.com/rhel7/rhel:7.2\").",
          "type": "string"
        },
        "issuedBy": {
          "description": "If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.SignatureIssuer"
        },
        "issuedTo": {
          "description": "If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.SignatureSubject"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageSignature"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "signedClaims": {
          "description": "Contains claims from the signature.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Required: Describes a type of stored blob.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageSignature",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageSignature",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStream": {
      "description": "ImageStream stores a mapping of tags to images, metadata overrides that are applied when images are tagged in a stream, and an optional reference to a container image repository on a registry.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStream"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec describes the desired state of this stream",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamSpec"
        },
        "status": {
          "description": "Status describes the current state of this stream",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStream",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStream",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamImage": {
      "description": "ImageStreamImage represents an Image that is retrieved by image name from an ImageStream.",
      "required": [
        "image"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "image": {
          "description": "Image associated with the ImageStream and image name.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamImage"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamImage",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamImage",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamImport": {
      "description": "The image stream import resource provides an easy way for a user to find and import container images from other container image registries into the server. Individual images or an entire image repository may be imported, and users may choose to see the results of the import prior to tagging the resulting images into the specified image stream.\n\nThis API is intended for end-user tools that need to see the metadata of the image prior to import (for instance, to generate an application from it). Clients that know the desired image can continue to create spec.tags directly into their image streams.",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamImport"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is a description of the images that the user wishes to import",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamImportSpec"
        },
        "status": {
          "description": "Status is the the result of importing the image",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamImportStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamImport",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamImport",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamImportSpec": {
      "description": "ImageStreamImportSpec defines what images should be imported.",
      "required": [
        "import"
      ],
      "properties": {
        "images": {
          "description": "Images are a list of individual images to import.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageImportSpec"
          }
        },
        "import": {
          "description": "Import indicates whether to perform an import - if so, the specified tags are set on the spec and status of the image stream defined by the type meta.",
          "type": "boolean"
        },
        "repository": {
          "description": "Repository is an optional import of an entire container image repository. A maximum limit on the number of tags imported this way is imposed by the server.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.RepositoryImportSpec"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamImportStatus": {
      "description": "ImageStreamImportStatus contains information about the status of an image stream import.",
      "properties": {
        "images": {
          "description": "Images is set with the result of importing spec.images",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageImportStatus"
          }
        },
        "import": {
          "description": "Import is the image stream that was successfully updated or created when 'to' was set.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStream"
        },
        "repository": {
          "description": "Repository is set if spec.repository was set to the outcome of the import",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.RepositoryImportStatus"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamLayers": {
      "description": "ImageStreamLayers describes information about the layers referenced by images in this image stream.",
      "required": [
        "blobs",
        "images"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "image.openshift.io/v1"
          ]
        },
        "blobs": {
          "description": "blobs is a map of blob name to metadata about the blob.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageLayerData"
          }
        },
        "images": {
          "description": "images is a map between an image name and the names of the blobs and config that comprise the image.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageBlobReferences"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamLayers"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamLayers",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamList": {
      "description": "ImageStreamList is a list of ImageStream objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of imageStreams",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStream"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamList",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamMapping": {
      "description": "ImageStreamMapping represents a mapping from a single tag to a container image as well as the reference to the container image stream the image came from.",
      "required": [
        "image",
        "tag"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "image": {
          "description": "Image is a container image.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamMapping"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "tag": {
          "description": "Tag is a string value this image can be located with inside the stream.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamMapping",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamMapping",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamSpec": {
      "description": "ImageStreamSpec represents options for ImageStreams.",
      "properties": {
        "dockerImageRepository": {
          "description": "dockerImageRepository is optional, if specified this stream is backed by a container repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead.",
          "type": "string"
        },
        "lookupPolicy": {
          "description": "lookupPolicy controls how other resources reference images within this namespace.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageLookupPolicy"
        },
        "tags": {
          "description": "tags map arbitrary string values to specific image locators",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReference"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamStatus": {
      "description": "ImageStreamStatus contains information about the state of this image stream.",
      "required": [
        "dockerImageRepository"
      ],
      "properties": {
        "dockerImageRepository": {
          "description": "DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located",
          "type": "string"
        },
        "publicDockerImageRepository": {
          "description": "PublicDockerImageRepository represents the public location from where the image can be pulled outside the cluster. This field may be empty if the administrator has not exposed the integrated registry externally.",
          "type": "string"
        },
        "tags": {
          "description": "Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.NamedTagEventList"
          },
          "x-kubernetes-patch-merge-key": "tag",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamTag": {
      "description": "ImageStreamTag represents an Image that is retrieved by tag name from an ImageStream.",
      "required": [
        "tag",
        "generation",
        "lookupPolicy",
        "image"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "conditions": {
          "description": "conditions is an array of conditions that apply to the image stream tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.TagEventCondition"
          }
        },
        "generation": {
          "description": "generation is the current generation of the tagged image - if tag is provided and this value is not equal to the tag generation, a user has requested an import that has not completed, or conditions will be filled out indicating any error.",
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "description": "image associated with the ImageStream and tag.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.Image"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamTag"
          ]
        },
        "lookupPolicy": {
          "description": "lookupPolicy indicates whether this tag will handle image references in this namespace.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageLookupPolicy"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "tag": {
          "description": "tag is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamTag",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamTag",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.ImageStreamTagList": {
      "description": "ImageStreamTagList is a list of ImageStreamTag objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of image stream tags",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageStreamTag"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ImageStreamTagList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ImageStreamTagList",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "ImageStreamTagList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.NamedTagEventList": {
      "description": "NamedTagEventList relates a tag to its image history.",
      "required": [
        "tag",
        "items"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions is an array of conditions that apply to the tag event list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.TagEventCondition"
          }
        },
        "items": {
          "description": "Standard object's metadata.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.TagEvent"
          }
        },
        "tag": {
          "description": "Tag is the tag for which the history is recorded",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.RepositoryImportSpec": {
      "description": "RepositoryImportSpec describes a request to import images from a container image repository.",
      "required": [
        "from"
      ],
      "properties": {
        "from": {
          "description": "From is the source for the image repository to import; only kind DockerImage and a name of a container image repository is allowed",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "importPolicy": {
          "description": "ImportPolicy is the policy controlling how the image is imported",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagImportPolicy"
        },
        "includeManifest": {
          "description": "IncludeManifest determines if the manifest for each image is returned in the response",
          "type": "boolean"
        },
        "referencePolicy": {
          "description": "ReferencePolicy defines how other components should consume the image",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReferencePolicy"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.RepositoryImportStatus": {
      "description": "RepositoryImportStatus describes the result of an image repository import",
      "properties": {
        "additionalTags": {
          "description": "AdditionalTags are tags that exist in the repository but were not imported because a maximum limit of automatic imports was applied.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "images": {
          "description": "Images is a list of images successfully retrieved by the import of the repository.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.image.v1.ImageImportStatus"
          }
        },
        "status": {
          "description": "Status reflects whether any failure occurred during import",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.SignatureCondition": {
      "description": "SignatureCondition describes an image signature condition of particular kind at particular probe time.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time the condition was checked.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of signature condition, Complete or Failed.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.SignatureIssuer": {
      "description": "SignatureIssuer holds information about an issuer of signing certificate or key.",
      "properties": {
        "commonName": {
          "description": "Common name (e.g. openshift-signing-service).",
          "type": "string"
        },
        "organization": {
          "description": "Organization name.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.SignatureSubject": {
      "description": "SignatureSubject holds information about a person or entity who created the signature.",
      "required": [
        "publicKeyID"
      ],
      "properties": {
        "commonName": {
          "description": "Common name (e.g. openshift-signing-service).",
          "type": "string"
        },
        "organization": {
          "description": "Organization name.",
          "type": "string"
        },
        "publicKeyID": {
          "description": "If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.TagEvent": {
      "description": "TagEvent is used by ImageStreamStatus to keep a historical record of images associated with a tag.",
      "required": [
        "created",
        "dockerImageReference",
        "image",
        "generation"
      ],
      "properties": {
        "created": {
          "description": "Created holds the time the TagEvent was created",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "dockerImageReference": {
          "description": "DockerImageReference is the string that can be used to pull this image",
          "type": "string"
        },
        "generation": {
          "description": "Generation is the spec tag generation that resulted in this tag being updated",
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "description": "Image is the image",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.TagEventCondition": {
      "description": "TagEventCondition contains condition information for a tag event.",
      "required": [
        "type",
        "status",
        "generation"
      ],
      "properties": {
        "generation": {
          "description": "Generation is the spec tag generation that this status corresponds to",
          "type": "integer",
          "format": "int64"
        },
        "lastTransitionTime": {
          "description": "LastTransitionTIme is the time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable description of the details about last transition, complementing reason.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of tag event condition, currently only ImportSuccess",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.TagImportPolicy": {
      "description": "TagImportPolicy controls how images related to this tag will be imported.",
      "properties": {
        "insecure": {
          "description": "Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.",
          "type": "boolean"
        },
        "scheduled": {
          "description": "Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.TagReference": {
      "description": "TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.",
      "required": [
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "from": {
          "description": "Optional; if specified, a reference to another image that this tag should point to. Valid values are ImageStreamTag, ImageStreamImage, and DockerImage.  ImageStreamTag references can only reference a tag within this same ImageStream.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "generation": {
          "description": "Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.",
          "type": "integer",
          "format": "int64"
        },
        "importPolicy": {
          "description": "ImportPolicy is information that controls how images may be imported by the server.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagImportPolicy"
        },
        "name": {
          "description": "Name of the tag",
          "type": "string"
        },
        "reference": {
          "description": "Reference states if the tag will be imported. Default value is false, which means the tag will be imported.",
          "type": "boolean"
        },
        "referencePolicy": {
          "description": "ReferencePolicy defines how other components should consume the image.",
          "$ref": "#/definitions/com.github.openshift.api.image.v1.TagReferencePolicy"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.image.v1.TagReferencePolicy": {
      "description": "TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated container image registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.ClusterNetwork": {
      "description": "ClusterNetwork describes the cluster network. There is normally only one object of this type, named \"default\", which is created by the SDN network plugin based on the master configuration when the cluster is brought up for the first time.",
      "required": [
        "serviceNetwork",
        "clusterNetworks"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "network.openshift.io/v1"
          ]
        },
        "clusterNetworks": {
          "description": "ClusterNetworks is a list of ClusterNetwork objects that defines the global overlay network's L3 space by specifying a set of CIDR and netmasks that the SDN can allocate addressed from.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.network.v1.ClusterNetworkEntry"
          }
        },
        "hostsubnetlength": {
          "description": "HostSubnetLength is the number of bits of network to allocate to each node. eg, 8 would mean that each node would have a /24 slice of the overlay network for its pods",
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterNetwork"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "network": {
          "description": "Network is a CIDR string specifying the global overlay network's L3 space",
          "type": "string"
        },
        "pluginName": {
          "description": "PluginName is the name of the network plugin being used",
          "type": "string"
        },
        "serviceNetwork": {
          "description": "ServiceNetwork is the CIDR range that Service IP addresses are allocated from",
          "type": "string"
        },
        "vxlanPort": {
          "description": "VXLANPort sets the VXLAN destination port used by the cluster. It is set by the master configuration file on startup and cannot be edited manually. Valid values for VXLANPort are integers 1-65535 inclusive and if unset defaults to 4789. Changing VXLANPort allows users to resolve issues between openshift SDN and other software trying to use the same VXLAN destination port.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterNetwork",
          "version": "v1"
        },
        {
          "group": "network.openshift.io",
          "kind": "ClusterNetwork",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.ClusterNetworkEntry": {
      "description": "ClusterNetworkEntry defines an individual cluster network. The CIDRs cannot overlap with other cluster network CIDRs, CIDRs reserved for external ips, CIDRs reserved for service networks, and CIDRs reserved for ingress ips.",
      "required": [
        "CIDR",
        "hostSubnetLength"
      ],
      "properties": {
        "CIDR": {
          "description": "CIDR defines the total range of a cluster networks address space.",
          "type": "string"
        },
        "hostSubnetLength": {
          "description": "HostSubnetLength is the number of bits of the accompanying CIDR address to allocate to each node. eg, 8 would mean that each node would have a /24 slice of the overlay network for its pods.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.ClusterNetworkList": {
      "description": "ClusterNetworkList is a collection of ClusterNetworks",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "network.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of cluster networks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.network.v1.ClusterNetwork"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterNetworkList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterNetworkList",
          "version": "v1"
        },
        {
          "group": "network.openshift.io",
          "kind": "ClusterNetworkList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.EgressNetworkPolicy": {
      "description": "EgressNetworkPolicy describes the current egress network policy for a Namespace. When using the 'redhat/openshift-ovs-multitenant' network plugin, traffic from a pod to an IP address outside the cluster will be checked against each EgressNetworkPolicyRule in the pod's namespace's EgressNetworkPolicy, in order. If no rule matches (or no EgressNetworkPolicy is present) then the traffic will be allowed by default.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "network.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EgressNetworkPolicy"
          ]
        },
        "metadata": {
          "description": "metadata for EgressNetworkPolicy",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of the current egress network policy",
          "$ref": "#/definitions/com.github.openshift.api.network.v1.EgressNetworkPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EgressNetworkPolicy",
          "version": "v1"
        },
        {
          "group": "network.openshift.io",
          "kind": "EgressNetworkPolicy",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.EgressNetworkPolicyList": {
      "description": "EgressNetworkPolicyList is a collection of EgressNetworkPolicy",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "network.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is the list of policies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.network.v1.EgressNetworkPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EgressNetworkPolicyList"
          ]
        },
        "metadata": {
          "description": "metadata for EgressNetworkPolicyList",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EgressNetworkPolicyList",
          "version": "v1"
        },
        {
          "group": "network.openshift.io",
          "kind": "EgressNetworkPolicyList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.EgressNetworkPolicyPeer": {
      "description": "EgressNetworkPolicyPeer specifies a target to apply egress network policy to",
      "properties": {
        "cidrSelector": {
          "description": "cidrSelector is the CIDR range to allow/deny traffic to. If this is set, dnsName must be unset",
          "type": "string"
        },
        "dnsName": {
          "description": "dnsName is the domain name to allow/deny traffic to. If this is set, cidrSelector must be unset",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.EgressNetworkPolicyRule": {
      "description": "EgressNetworkPolicyRule contains a single egress network policy rule",
      "required": [
        "type",
        "to"
      ],
      "properties": {
        "to": {
          "description": "to is the target that traffic is allowed/denied to",
          "$ref": "#/definitions/com.github.openshift.api.network.v1.EgressNetworkPolicyPeer"
        },
        "type": {
          "description": "type marks this as an \"Allow\" or \"Deny\" rule",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.EgressNetworkPolicySpec": {
      "description": "EgressNetworkPolicySpec provides a list of policies on outgoing network traffic",
      "required": [
        "egress"
      ],
      "properties": {
        "egress": {
          "description": "egress contains the list of egress policy rules",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.network.v1.EgressNetworkPolicyRule"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.HostSubnet": {
      "description": "HostSubnet describes the container subnet network on a node. The HostSubnet object must have the same name as the Node object it corresponds to.",
      "required": [
        "host",
        "hostIP",
        "subnet"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "network.openshift.io/v1"
          ]
        },
        "egressCIDRs": {
          "description": "EgressCIDRs is the list of CIDR ranges available for automatically assigning egress IPs to this node from. If this field is set then EgressIPs should be treated as read-only.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "egressIPs": {
          "description": "EgressIPs is the list of automatic egress IP addresses currently hosted by this node. If EgressCIDRs is empty, this can be set by hand; if EgressCIDRs is set then the master will overwrite the value here with its own allocation of egress IPs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "host": {
          "description": "Host is the name of the node. (This is the same as the object's name, but both fields must be set.)",
          "type": "string"
        },
        "hostIP": {
          "description": "HostIP is the IP address to be used as a VTEP by other nodes in the overlay network",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HostSubnet"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "subnet": {
          "description": "Subnet is the CIDR range of the overlay network assigned to the node for its pods",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "HostSubnet",
          "version": "v1"
        },
        {
          "group": "network.openshift.io",
          "kind": "HostSubnet",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.HostSubnetList": {
      "description": "HostSubnetList is a collection of HostSubnets",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "network.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of host subnets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.network.v1.HostSubnet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HostSubnetList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "HostSubnetList",
          "version": "v1"
        },
        {
          "group": "network.openshift.io",
          "kind": "HostSubnetList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.NetNamespace": {
      "description": "NetNamespace describes a single isolated network. When using the redhat/openshift-ovs-multitenant plugin, every Namespace will have a corresponding NetNamespace object with the same name. (When using redhat/openshift-ovs-subnet, NetNamespaces are not used.)",
      "required": [
        "netname",
        "netid"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "network.openshift.io/v1"
          ]
        },
        "egressIPs": {
          "description": "EgressIPs is a list of reserved IPs that will be used as the source for external traffic coming from pods in this namespace. (If empty, external traffic will be masqueraded to Node IPs.)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetNamespace"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "netid": {
          "description": "NetID is the network identifier of the network namespace assigned to each overlay network packet. This can be manipulated with the \"oc adm pod-network\" commands.",
          "type": "integer",
          "format": "int64"
        },
        "netname": {
          "description": "NetName is the name of the network namespace. (This is the same as the object's name, but both fields must be set.)",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NetNamespace",
          "version": "v1"
        },
        {
          "group": "network.openshift.io",
          "kind": "NetNamespace",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.network.v1.NetNamespaceList": {
      "description": "NetNamespaceList is a collection of NetNamespaces",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "network.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of net namespaces",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.network.v1.NetNamespace"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetNamespaceList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NetNamespaceList",
          "version": "v1"
        },
        {
          "group": "network.openshift.io",
          "kind": "NetNamespaceList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.ClusterRoleScopeRestriction": {
      "description": "ClusterRoleScopeRestriction describes restrictions on cluster role scopes",
      "required": [
        "roleNames",
        "namespaces",
        "allowEscalation"
      ],
      "properties": {
        "allowEscalation": {
          "description": "AllowEscalation indicates whether you can request roles and their escalating resources",
          "type": "boolean"
        },
        "namespaces": {
          "description": "Namespaces is the list of namespaces that can be referenced.  * means any of them (including *)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "roleNames": {
          "description": "RoleNames is the list of cluster roles that can referenced.  * means anything",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.OAuthAccessToken": {
      "description": "OAuthAccessToken describes an OAuth access token",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "authorizeToken": {
          "description": "AuthorizeToken contains the token that authorized this token",
          "type": "string"
        },
        "clientName": {
          "description": "ClientName references the client that created this token.",
          "type": "string"
        },
        "expiresIn": {
          "description": "ExpiresIn is the seconds from CreationTime before this token expires.",
          "type": "integer",
          "format": "int64"
        },
        "inactivityTimeoutSeconds": {
          "description": "InactivityTimeoutSeconds is the value in seconds, from the CreationTimestamp, after which this token can no longer be used. The value is automatically incremented when the token is used.",
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthAccessToken"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "redirectURI": {
          "description": "RedirectURI is the redirection associated with the token.",
          "type": "string"
        },
        "refreshToken": {
          "description": "RefreshToken is the value by which this token can be renewed. Can be blank.",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes is an array of the requested scopes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userName": {
          "description": "UserName is the user name associated with this token",
          "type": "string"
        },
        "userUID": {
          "description": "UserUID is the unique UID associated with this token",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthAccessToken",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthAccessToken",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.OAuthAccessTokenList": {
      "description": "OAuthAccessTokenList is a collection of OAuth access tokens",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of OAuth access tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.OAuthAccessToken"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthAccessTokenList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthAccessTokenList",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthAccessTokenList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.OAuthAuthorizeToken": {
      "description": "OAuthAuthorizeToken describes an OAuth authorization token",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "clientName": {
          "description": "ClientName references the client that created this token.",
          "type": "string"
        },
        "codeChallenge": {
          "description": "CodeChallenge is the optional code_challenge associated with this authorization code, as described in rfc7636",
          "type": "string"
        },
        "codeChallengeMethod": {
          "description": "CodeChallengeMethod is the optional code_challenge_method associated with this authorization code, as described in rfc7636",
          "type": "string"
        },
        "expiresIn": {
          "description": "ExpiresIn is the seconds from CreationTime before this token expires.",
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthAuthorizeToken"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "redirectURI": {
          "description": "RedirectURI is the redirection associated with the token.",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes is an array of the requested scopes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "description": "State data from request",
          "type": "string"
        },
        "userName": {
          "description": "UserName is the user name associated with this token",
          "type": "string"
        },
        "userUID": {
          "description": "UserUID is the unique UID associated with this token. UserUID and UserName must both match for this token to be valid.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthAuthorizeToken",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthAuthorizeToken",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.OAuthAuthorizeTokenList": {
      "description": "OAuthAuthorizeTokenList is a collection of OAuth authorization tokens",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of OAuth authorization tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.OAuthAuthorizeToken"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthAuthorizeTokenList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthAuthorizeTokenList",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthAuthorizeTokenList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.OAuthClient": {
      "description": "OAuthClient describes an OAuth client",
      "properties": {
        "accessTokenInactivityTimeoutSeconds": {
          "description": "AccessTokenInactivityTimeoutSeconds overrides the default token inactivity timeout for tokens granted to this client. The value represents the maximum amount of time that can occur between consecutive uses of the token. Tokens become invalid if they are not used within this temporal window. The user will need to acquire a new token to regain access once a token times out. This value needs to be set only if the default set in configuration is not appropriate for this client. Valid values are: - 0: Tokens for this client never time out - X: Tokens time out if there is no activity for X seconds The current minimum allowed value for X is 300 (5 minutes)",
          "type": "integer",
          "format": "int32"
        },
        "accessTokenMaxAgeSeconds": {
          "description": "AccessTokenMaxAgeSeconds overrides the default access token max age for tokens granted to this client. 0 means no expiration.",
          "type": "integer",
          "format": "int32"
        },
        "additionalSecrets": {
          "description": "AdditionalSecrets holds other secrets that may be used to identify the client.  This is useful for rotation and for service account token validation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "grantMethod": {
          "description": "GrantMethod determines how to handle grants for this client. If no method is provided, the cluster default grant handling method will be used. Valid grant handling methods are:\n - auto:   always approves grant requests, useful for trusted clients\n - prompt: prompts the end user for approval of grant requests, useful for third-party clients\n - deny:   always denies grant requests, useful for black-listed clients",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthClient"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "redirectURIs": {
          "description": "RedirectURIs is the valid redirection URIs associated with a client",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "respondWithChallenges": {
          "description": "RespondWithChallenges indicates whether the client wants authentication needed responses made in the form of challenges instead of redirects",
          "type": "boolean"
        },
        "scopeRestrictions": {
          "description": "ScopeRestrictions describes which scopes this client can request.  Each requested scope is checked against each restriction.  If any restriction matches, then the scope is allowed. If no restriction matches, then the scope is denied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.ScopeRestriction"
          }
        },
        "secret": {
          "description": "Secret is the unique secret associated with a client",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthClient",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthClient",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.OAuthClientAuthorization": {
      "description": "OAuthClientAuthorization describes an authorization created by an OAuth client",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "clientName": {
          "description": "ClientName references the client that created this authorization",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthClientAuthorization"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "scopes": {
          "description": "Scopes is an array of the granted scopes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userName": {
          "description": "UserName is the user name that authorized this client",
          "type": "string"
        },
        "userUID": {
          "description": "UserUID is the unique UID associated with this authorization. UserUID and UserName must both match for this authorization to be valid.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthClientAuthorization",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthClientAuthorization",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.OAuthClientAuthorizationList": {
      "description": "OAuthClientAuthorizationList is a collection of OAuth client authorizations",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of OAuth client authorizations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.OAuthClientAuthorization"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthClientAuthorizationList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthClientAuthorizationList",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthClientAuthorizationList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.OAuthClientList": {
      "description": "OAuthClientList is a collection of OAuth clients",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "oauth.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of OAuth clients",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.oauth.v1.OAuthClient"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "OAuthClientList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "OAuthClientList",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "OAuthClientList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.oauth.v1.ScopeRestriction": {
      "description": "ScopeRestriction describe one restriction on scopes.  Exactly one option must be non-nil.",
      "properties": {
        "clusterRole": {
          "description": "ClusterRole describes a set of restrictions for cluster role scoping.",
          "$ref": "#/definitions/com.github.openshift.api.oauth.v1.ClusterRoleScopeRestriction"
        },
        "literals": {
          "description": "ExactValues means the scope has to match a particular set of strings exactly",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.project.v1.Project": {
      "description": "Projects are the unit of isolation and collaboration in OpenShift. A project has one or more members, a quota on the resources that the project may consume, and the security controls on the resources in the project. Within a project, members may have different roles - project administrators can set membership, editors can create and manage the resources, and viewers can see but not access running containers. In a normal cluster project administrators are not able to alter their quotas - that is restricted to cluster administrators.\n\nListing or watching projects will return only projects the user has the reader role on.\n\nAn OpenShift project is an alternative representation of a Kubernetes namespace. Projects are exposed as editable to end users while namespaces are not. Direct creation of a project is typically restricted to administrators, while end users should use the requestproject resource.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "project.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Project"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of the Namespace.",
          "$ref": "#/definitions/com.github.openshift.api.project.v1.ProjectSpec"
        },
        "status": {
          "description": "Status describes the current status of a Namespace",
          "$ref": "#/definitions/com.github.openshift.api.project.v1.ProjectStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Project",
          "version": "v1"
        },
        {
          "group": "project.openshift.io",
          "kind": "Project",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.project.v1.ProjectList": {
      "description": "ProjectList is a list of Project objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "project.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of projects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.project.v1.Project"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProjectList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ProjectList",
          "version": "v1"
        },
        {
          "group": "project.openshift.io",
          "kind": "ProjectList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.project.v1.ProjectRequest": {
      "description": "ProjecRequest is the set of options necessary to fully qualify a project request",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "project.openshift.io/v1"
          ]
        },
        "description": {
          "description": "Description is the description to apply to a project",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the display name to apply to a project",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProjectRequest"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ProjectRequest",
          "version": "v1"
        },
        {
          "group": "project.openshift.io",
          "kind": "ProjectRequest",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.project.v1.ProjectSpec": {
      "description": "ProjectSpec describes the attributes on a Project",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.project.v1.ProjectStatus": {
      "description": "ProjectStatus is information about the current status of a Project",
      "properties": {
        "phase": {
          "description": "Phase is the current lifecycle phase of the project",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.quota.v1.AppliedClusterResourceQuota": {
      "description": "AppliedClusterResourceQuota mirrors ClusterResourceQuota at a project scope, for projection into a project.  It allows a project-admin to know which ClusterResourceQuotas are applied to his project and their associated usage.",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "quota.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AppliedClusterResourceQuota"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired quota",
          "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuotaSpec"
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage",
          "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuotaStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "AppliedClusterResourceQuota",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "AppliedClusterResourceQuota",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.quota.v1.AppliedClusterResourceQuotaList": {
      "description": "AppliedClusterResourceQuotaList is a collection of AppliedClusterResourceQuotas",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "quota.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of AppliedClusterResourceQuota",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.quota.v1.AppliedClusterResourceQuota"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "AppliedClusterResourceQuotaList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "AppliedClusterResourceQuotaList",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "AppliedClusterResourceQuotaList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuota": {
      "description": "ClusterResourceQuota mirrors ResourceQuota at a cluster scope.  This object is easily convertible to synthetic ResourceQuota object to allow quota evaluation re-use.",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "quota.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterResourceQuota"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired quota",
          "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuotaSpec"
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage",
          "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuotaStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterResourceQuota",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "ClusterResourceQuota",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaList": {
      "description": "ClusterResourceQuotaList is a collection of ClusterResourceQuotas",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "quota.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterResourceQuotas",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuota"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterResourceQuotaList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ClusterResourceQuotaList",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "ClusterResourceQuotaList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaSelector": {
      "description": "ClusterResourceQuotaSelector is used to select projects.  At least one of LabelSelector or AnnotationSelector must present.  If only one is present, it is the only selection criteria.  If both are specified, the project must match both restrictions.",
      "required": [
        "labels",
        "annotations"
      ],
      "properties": {
        "annotations": {
          "description": "AnnotationSelector is used to select projects by annotation.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "LabelSelector is used to select projects by label.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaSpec": {
      "description": "ClusterResourceQuotaSpec defines the desired quota restrictions",
      "required": [
        "selector",
        "quota"
      ],
      "properties": {
        "quota": {
          "description": "Quota defines the desired quota",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec"
        },
        "selector": {
          "description": "Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource.",
          "$ref": "#/definitions/com.github.openshift.api.quota.v1.ClusterResourceQuotaSelector"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.quota.v1.ClusterResourceQuotaStatus": {
      "description": "ClusterResourceQuotaStatus defines the actual enforced quota and its current usage",
      "required": [
        "total",
        "namespaces"
      ],
      "properties": {
        "namespaces": {
          "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.quota.v1.ResourceQuotaStatusByNamespace"
          }
        },
        "total": {
          "description": "Total defines the actual enforced quota and its current usage across all projects",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.quota.v1.ResourceQuotaStatusByNamespace": {
      "description": "ResourceQuotaStatusByNamespace gives status for a particular project",
      "required": [
        "namespace",
        "status"
      ],
      "properties": {
        "namespace": {
          "description": "Namespace the project this status applies to",
          "type": "string"
        },
        "status": {
          "description": "Status indicates how many resources have been consumed by this project",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.Route": {
      "description": "A route allows developers to expose services through an HTTP(S) aware load balancing and proxy layer via a public DNS entry. The route may further specify TLS options and a certificate, or specify a public CNAME that the router should also accept for HTTP and HTTPS traffic. An administrator typically configures their router to be visible outside the cluster firewall, and may also add additional security, caching, or traffic controls on the service content. Routers usually talk directly to the service endpoints.\n\nOnce a route is created, the `host` field may not be changed. Generally, routers use the oldest route with a given host when resolving conflicts.\n\nRouters are subject to additional customization and may support additional controls via the annotations field.\n\nBecause administrators may configure multiple routers, the route status field is used to return information to clients about the names and states of the route under each router. If a client chooses a duplicate name, for instance, the route status conditions are used to indicate the route cannot be chosen.",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "route.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Route"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the route",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteSpec"
        },
        "status": {
          "description": "status is the current state of the route",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Route",
          "version": "v1"
        },
        {
          "group": "route.openshift.io",
          "kind": "Route",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.RouteIngress": {
      "description": "RouteIngress holds information about the places where a route is exposed.",
      "properties": {
        "conditions": {
          "description": "Conditions is the state of the route, may be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteIngressCondition"
          }
        },
        "host": {
          "description": "Host is the host string under which the route is exposed; this value is required",
          "type": "string"
        },
        "routerCanonicalHostname": {
          "description": "CanonicalHostname is the external host name for the router that can be used as a CNAME for the host requested for this route. This value is optional and may not be set in all cases.",
          "type": "string"
        },
        "routerName": {
          "description": "Name is a name chosen by the router to identify itself; this value is required",
          "type": "string"
        },
        "wildcardPolicy": {
          "description": "Wildcard policy is the wildcard policy that was allowed where this route is exposed.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.RouteIngressCondition": {
      "description": "RouteIngressCondition contains details for the current condition of this route on a particular router.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "RFC 3339 date and time when this condition last transitioned",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition, and is usually a machine and human readable constant",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition. Currently only Ready.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.RouteList": {
      "description": "RouteList is a collection of Routes.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "route.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of routes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.route.v1.Route"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RouteList"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "RouteList",
          "version": "v1"
        },
        {
          "group": "route.openshift.io",
          "kind": "RouteList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.RoutePort": {
      "description": "RoutePort defines a port mapping from a router to an endpoint in the service endpoints.",
      "required": [
        "targetPort"
      ],
      "properties": {
        "targetPort": {
          "description": "The target port on pods selected by the service this route points to. If this is a string, it will be looked up as a named port in the target endpoints port list. Required",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.RouteSpec": {
      "description": "RouteSpec describes the hostname or path the route exposes, any security information, and one to four backends (services) the route points to. Requests are distributed among the backends depending on the weights assigned to each backend. When using roundrobin scheduling the portion of requests that go to each backend is the backend weight divided by the sum of all of the backend weights. When the backend has more than one endpoint the requests that end up on the backend are roundrobin distributed among the endpoints. Weights are between 0 and 256 with default 1. Weight 0 causes no requests to the backend. If all weights are zero the route will be considered to have no backends and return a standard 503 response.\n\nThe `tls` field is optional and allows specific certificates or behavior for the route. Routers typically configure a default certificate on a wildcard domain to terminate routes without explicit certificates, but custom hostnames usually must choose passthrough (send traffic directly to the backend via the TLS Server-Name- Indication field) or provide a certificate.",
      "required": [
        "host",
        "to"
      ],
      "properties": {
        "alternateBackends": {
          "description": "alternateBackends allows up to 3 additional backends to be assigned to the route. Only the Service kind is allowed, and it will be defaulted to Service. Use the weight field in RouteTargetReference object to specify relative preference.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteTargetReference"
          }
        },
        "host": {
          "description": "host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions.",
          "type": "string"
        },
        "path": {
          "description": "Path that the router watches for, to route traffic for to the service. Optional",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use.",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.RoutePort"
        },
        "tls": {
          "description": "The tls field provides the ability to configure certificates and termination for the route.",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.TLSConfig"
        },
        "to": {
          "description": "to is an object the route should use as the primary backend. Only the Service kind is allowed, and it will be defaulted to Service. If the weight field (0-256 default 1) is set to zero, no traffic will be sent to this backend.",
          "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteTargetReference"
        },
        "wildcardPolicy": {
          "description": "Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.RouteStatus": {
      "description": "RouteStatus provides relevant info about the status of a route, including which routers acknowledge it.",
      "required": [
        "ingress"
      ],
      "properties": {
        "ingress": {
          "description": "ingress describes the places where the route may be exposed. The list of ingress points may contain duplicate Host or RouterName values. Routes are considered live once they are `Ready`",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.route.v1.RouteIngress"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.RouteTargetReference": {
      "description": "RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.",
      "required": [
        "kind",
        "name",
        "weight"
      ],
      "properties": {
        "kind": {
          "description": "The kind of target that the route is referring to. Currently, only 'Service' is allowed",
          "type": "string"
        },
        "name": {
          "description": "name of the service/target that is being referred to. e.g. name of the service",
          "type": "string"
        },
        "weight": {
          "description": "weight as an integer between 0 and 256, default 1, that specifies the target's relative weight against other target reference objects. 0 suppresses requests to this backend.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.route.v1.TLSConfig": {
      "description": "TLSConfig defines config used to secure a route and provide termination",
      "required": [
        "termination"
      ],
      "properties": {
        "caCertificate": {
          "description": "caCertificate provides the cert authority certificate contents",
          "type": "string"
        },
        "certificate": {
          "description": "certificate provides certificate contents",
          "type": "string"
        },
        "destinationCACertificate": {
          "description": "destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.",
          "type": "string"
        },
        "insecureEdgeTerminationPolicy": {
          "description": "insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.\n\n* Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.",
          "type": "string"
        },
        "key": {
          "description": "key provides key file contents",
          "type": "string"
        },
        "termination": {
          "description": "termination indicates termination type.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.AllowedFlexVolume": {
      "description": "AllowedFlexVolume represents a single Flexvolume that is allowed to be used.",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "Driver is the name of the Flexvolume driver.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.FSGroupStrategyOptions": {
      "description": "FSGroupStrategyOptions defines the strategy type and options used to create the strategy.",
      "properties": {
        "ranges": {
          "description": "Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.security.v1.IDRange"
          }
        },
        "type": {
          "description": "Type is the strategy that will dictate what FSGroup is used in the SecurityContext.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.IDRange": {
      "description": "IDRange provides a min/max of an allowed range of IDs.",
      "properties": {
        "max": {
          "description": "Max is the end of the range, inclusive.",
          "type": "integer",
          "format": "int64"
        },
        "min": {
          "description": "Min is the start of the range, inclusive.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicyReview": {
      "description": "PodSecurityPolicyReview checks which service accounts (not users, since that would be cluster-wide) can create the `PodTemplateSpec` in question.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "security.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicyReview"
          ]
        },
        "spec": {
          "description": "spec is the PodSecurityPolicy to check.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicyReviewSpec"
        },
        "status": {
          "description": "status represents the current information/status for the PodSecurityPolicyReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicyReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodSecurityPolicyReview",
          "version": "v1"
        },
        {
          "group": "security.openshift.io",
          "kind": "PodSecurityPolicyReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicyReviewSpec": {
      "description": "PodSecurityPolicyReviewSpec defines specification for PodSecurityPolicyReview",
      "required": [
        "template"
      ],
      "properties": {
        "serviceAccountNames": {
          "description": "serviceAccountNames is an optional set of ServiceAccounts to run the check with. If serviceAccountNames is empty, the template.spec.serviceAccountName is used, unless it's empty, in which case \"default\" is used instead. If serviceAccountNames is specified, template.spec.serviceAccountName is ignored.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "description": "template is the PodTemplateSpec to check. The template.spec.serviceAccountName field is used if serviceAccountNames is empty, unless the template.spec.serviceAccountName is empty, in which case \"default\" is used. If serviceAccountNames is specified, template.spec.serviceAccountName is ignored.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicyReviewStatus": {
      "description": "PodSecurityPolicyReviewStatus represents the status of PodSecurityPolicyReview.",
      "required": [
        "allowedServiceAccounts"
      ],
      "properties": {
        "allowedServiceAccounts": {
          "description": "allowedServiceAccounts returns the list of service accounts in *this* namespace that have the power to create the PodTemplateSpec.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.security.v1.ServiceAccountPodSecurityPolicyReviewStatus"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySelfSubjectReview": {
      "description": "PodSecurityPolicySelfSubjectReview checks whether this user/SA tuple can create the PodTemplateSpec",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "security.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicySelfSubjectReview"
          ]
        },
        "spec": {
          "description": "spec defines specification the PodSecurityPolicySelfSubjectReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicySelfSubjectReviewSpec"
        },
        "status": {
          "description": "status represents the current information/status for the PodSecurityPolicySelfSubjectReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodSecurityPolicySelfSubjectReview",
          "version": "v1"
        },
        {
          "group": "security.openshift.io",
          "kind": "PodSecurityPolicySelfSubjectReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySelfSubjectReviewSpec": {
      "description": "PodSecurityPolicySelfSubjectReviewSpec contains specification for PodSecurityPolicySelfSubjectReview.",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "description": "template is the PodTemplateSpec to check.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySubjectReview": {
      "description": "PodSecurityPolicySubjectReview checks whether a particular user/SA tuple can create the PodTemplateSpec.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "security.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicySubjectReview"
          ]
        },
        "spec": {
          "description": "spec defines specification for the PodSecurityPolicySubjectReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewSpec"
        },
        "status": {
          "description": "status represents the current information/status for the PodSecurityPolicySubjectReview.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodSecurityPolicySubjectReview",
          "version": "v1"
        },
        {
          "group": "security.openshift.io",
          "kind": "PodSecurityPolicySubjectReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewSpec": {
      "description": "PodSecurityPolicySubjectReviewSpec defines specification for PodSecurityPolicySubjectReview",
      "required": [
        "template"
      ],
      "properties": {
        "groups": {
          "description": "groups is the groups you're testing for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "template": {
          "description": "template is the PodTemplateSpec to check. If template.spec.serviceAccountName is empty it will not be defaulted. If its non-empty, it will be checked.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "user": {
          "description": "user is the user you're testing for. If you specify \"user\" but not \"group\", then is it interpreted as \"What if user were not a member of any groups. If user and groups are empty, then the check is performed using *only* the serviceAccountName in the template.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.PodSecurityPolicySubjectReviewStatus": {
      "description": "PodSecurityPolicySubjectReviewStatus contains information/status for PodSecurityPolicySubjectReview.",
      "properties": {
        "allowedBy": {
          "description": "allowedBy is a reference to the rule that allows the PodTemplateSpec. A rule can be a SecurityContextConstraint or a PodSecurityPolicy A `nil`, indicates that it was denied.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available.",
          "type": "string"
        },
        "template": {
          "description": "template is the PodTemplateSpec after the defaulting is applied.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.RangeAllocation": {
      "description": "RangeAllocation is used so we can easily expose a RangeAllocation typed for security group",
      "required": [
        "range",
        "data"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "security.openshift.io/v1"
          ]
        },
        "data": {
          "description": "data is a byte array representing the serialized state of a range allocation.  It is a bitmap with each bit set to one to represent a range is taken.",
          "type": "string",
          "format": "byte"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RangeAllocation"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "range": {
          "description": "range is a string representing a unique label for a range of uids, \"1000000000-2000000000/10000\".",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "security.openshift.io",
          "kind": "RangeAllocation",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.RangeAllocationList": {
      "description": "RangeAllocationList is a list of RangeAllocations objects",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "security.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of RangeAllocations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.security.v1.RangeAllocation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RangeAllocationList"
          ]
        },
        "metadata": {
          "description": "More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "security.openshift.io",
          "kind": "RangeAllocationList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.RunAsUserStrategyOptions": {
      "description": "RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.",
      "properties": {
        "type": {
          "description": "Type is the strategy that will dictate what RunAsUser is used in the SecurityContext.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the user id that containers must run as.  Required for the MustRunAs strategy if not using namespace/service account allocated uids.",
          "type": "integer",
          "format": "int64"
        },
        "uidRangeMax": {
          "description": "UIDRangeMax defines the max value for a strategy that allocates by range.",
          "type": "integer",
          "format": "int64"
        },
        "uidRangeMin": {
          "description": "UIDRangeMin defines the min value for a strategy that allocates by range.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.SELinuxContextStrategyOptions": {
      "description": "SELinuxContextStrategyOptions defines the strategy type and any options used to create the strategy.",
      "properties": {
        "seLinuxOptions": {
          "description": "seLinuxOptions required to run as; required for MustRunAs",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        },
        "type": {
          "description": "Type is the strategy that will dictate what SELinux context is used in the SecurityContext.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.SecurityContextConstraints": {
      "description": "SecurityContextConstraints governs the ability to make requests that affect the SecurityContext that will be applied to a container. For historical reasons SCC was exposed under the core Kubernetes API group. That exposure is deprecated and will be removed in a future release - users should instead use the security.openshift.io group to manage SecurityContextConstraints.",
      "required": [
        "priority",
        "allowPrivilegedContainer",
        "defaultAddCapabilities",
        "requiredDropCapabilities",
        "allowedCapabilities",
        "allowHostDirVolumePlugin",
        "volumes",
        "allowHostNetwork",
        "allowHostPorts",
        "allowHostPID",
        "allowHostIPC",
        "readOnlyRootFilesystem"
      ],
      "properties": {
        "allowHostDirVolumePlugin": {
          "description": "AllowHostDirVolumePlugin determines if the policy allow containers to use the HostDir volume plugin",
          "type": "boolean"
        },
        "allowHostIPC": {
          "description": "AllowHostIPC determines if the policy allows host ipc in the containers.",
          "type": "boolean"
        },
        "allowHostNetwork": {
          "description": "AllowHostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
          "type": "boolean"
        },
        "allowHostPID": {
          "description": "AllowHostPID determines if the policy allows host pid in the containers.",
          "type": "boolean"
        },
        "allowHostPorts": {
          "description": "AllowHostPorts determines if the policy allows host ports in the containers.",
          "type": "boolean"
        },
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.",
          "type": "boolean"
        },
        "allowPrivilegedContainer": {
          "description": "AllowPrivilegedContainer determines if a container can request to be run as privileged.",
          "type": "boolean"
        },
        "allowedCapabilities": {
          "description": "AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field maybe added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities. To allow all capabilities you may use '*'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedFlexVolumes": {
          "description": "AllowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"Volumes\" field.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.security.v1.AllowedFlexVolume"
          }
        },
        "allowedUnsafeSysctls": {
          "description": "AllowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.\n\nExamples: e.g. \"foo/*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "security.openshift.io/v1"
          ]
        },
        "defaultAddCapabilities": {
          "description": "DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultAllowPrivilegeEscalation": {
          "description": "DefaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.",
          "type": "boolean"
        },
        "forbiddenSysctls": {
          "description": "ForbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.\n\nExamples: e.g. \"foo/*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fsGroup": {
          "description": "FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.FSGroupStrategyOptions"
        },
        "groups": {
          "description": "The groups that have permission to use this security context constraints",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SecurityContextConstraints"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "priority": {
          "description": "Priority influences the sort order of SCCs when evaluating which SCCs to try first for a given pod request based on access in the Users and Groups fields.  The higher the int, the higher priority. An unset value is considered a 0 priority. If scores for multiple SCCs are equal they will be sorted from most restrictive to least restrictive. If both priorities and restrictions are equal the SCCs will be sorted by name.",
          "type": "integer",
          "format": "int32"
        },
        "readOnlyRootFilesystem": {
          "description": "ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the SCC should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
          "type": "boolean"
        },
        "requiredDropCapabilities": {
          "description": "RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "runAsUser": {
          "description": "RunAsUser is the strategy that will dictate what RunAsUser is used in the SecurityContext.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.RunAsUserStrategyOptions"
        },
        "seLinuxContext": {
          "description": "SELinuxContext is the strategy that will dictate what labels will be set in the SecurityContext.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.SELinuxContextStrategyOptions"
        },
        "seccompProfiles": {
          "description": "SeccompProfiles lists the allowed profiles that may be set for the pod or container's seccomp annotations.  An unset (nil) or empty value means that no profiles may be specifid by the pod or container.\tThe wildcard '*' may be used to allow all profiles.  When used to generate a value for a pod the first non-wildcard profile will be used as the default.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supplementalGroups": {
          "description": "SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.",
          "$ref": "#/definitions/com.github.openshift.api.security.v1.SupplementalGroupsStrategyOptions"
        },
        "users": {
          "description": "The users who have permissions to use this security context constraints",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "description": "Volumes is a white list of allowed volume plugins.  FSType corresponds directly with the field names of a VolumeSource (azureFile, configMap, emptyDir).  To allow all volumes you may use \"*\". To allow no volumes, set to [\"none\"].",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SecurityContextConstraints",
          "version": "v1"
        },
        {
          "group": "security.openshift.io",
          "kind": "SecurityContextConstraints",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.SecurityContextConstraintsList": {
      "description": "SecurityContextConstraintsList is a list of SecurityContextConstraints objects",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "security.openshift.io/v1"
          ]
        },
        "items": {
          "description": "List of security context constraints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.security.v1.SecurityContextConstraints"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SecurityContextConstraintsList"
          ]
        },
        "metadata": {
          "description": "More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SecurityContextConstraintsList",
          "version": "v1"
        },
        {
          "group": "security.openshift.io",
          "kind": "SecurityContextConstraintsList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.ServiceAccountPodSecurityPolicyReviewStatus": {
      "description": "ServiceAccountPodSecurityPolicyReviewStatus represents ServiceAccount name and related review status",
      "required": [
        "name"
      ],
      "properties": {
        "allowedBy": {
          "description": "allowedBy is a reference to the rule that allows the PodTemplateSpec. A rule can be a SecurityContextConstraint or a PodSecurityPolicy A `nil`, indicates that it was denied.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "name": {
          "description": "name contains the allowed and the denied ServiceAccount name",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available.",
          "type": "string"
        },
        "template": {
          "description": "template is the PodTemplateSpec after the defaulting is applied.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.security.v1.SupplementalGroupsStrategyOptions": {
      "description": "SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.",
      "properties": {
        "ranges": {
          "description": "Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.security.v1.IDRange"
          }
        },
        "type": {
          "description": "Type is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.BrokerTemplateInstance": {
      "description": "BrokerTemplateInstance holds the service broker-related state associated with a TemplateInstance.  BrokerTemplateInstance is part of an experimental API.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "template.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BrokerTemplateInstance"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec describes the state of this BrokerTemplateInstance.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.BrokerTemplateInstanceSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "template.openshift.io",
          "kind": "BrokerTemplateInstance",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.BrokerTemplateInstanceList": {
      "description": "BrokerTemplateInstanceList is a list of BrokerTemplateInstance objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "template.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of BrokerTemplateInstances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.BrokerTemplateInstance"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "BrokerTemplateInstanceList"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "template.openshift.io",
          "kind": "BrokerTemplateInstanceList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.BrokerTemplateInstanceSpec": {
      "description": "BrokerTemplateInstanceSpec describes the state of a BrokerTemplateInstance.",
      "required": [
        "templateInstance",
        "secret"
      ],
      "properties": {
        "bindingIDs": {
          "description": "bindingids is a list of 'binding_id's provided during successive bind calls to the template service broker.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secret": {
          "description": "secret is a reference to a Secret object residing in a namespace, containing the necessary template parameters.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "templateInstance": {
          "description": "templateinstance is a reference to a TemplateInstance object residing in a namespace.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.Parameter": {
      "description": "Parameter defines a name/value variable that is to be processed during the Template to Config transformation.",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "Description of a parameter. Optional.",
          "type": "string"
        },
        "displayName": {
          "description": "Optional: The name that will show in UI instead of parameter 'Name'",
          "type": "string"
        },
        "from": {
          "description": "From is an input value for the generator. Optional.",
          "type": "string"
        },
        "generate": {
          "description": "generate specifies the generator to be used to generate random string from an input value specified by From field. The result string is stored into Value field. If empty, no generator is being used, leaving the result Value untouched. Optional.\n\nThe only supported generator is \"expression\", which accepts a \"from\" value in the form of a simple regular expression containing the range expression \"[a-zA-Z0-9]\", and the length expression \"a{length}\".\n\nExamples:\n\nfrom             | value ----------------------------- \"test[0-9]{1}x\"  | \"test7x\" \"[0-1]{8}\"       | \"01001100\" \"0x[A-F0-9]{4}\"  | \"0xB3AF\" \"[a-zA-Z0-9]{8}\" | \"hW4yQU5i\"",
          "type": "string"
        },
        "name": {
          "description": "Name must be set and it can be referenced in Template Items using ${PARAMETER_NAME}. Required.",
          "type": "string"
        },
        "required": {
          "description": "Optional: Indicates the parameter must have a value.  Defaults to false.",
          "type": "boolean"
        },
        "value": {
          "description": "Value holds the Parameter data. If specified, the generator will be ignored. The value replaces all occurrences of the Parameter ${Name} expression during the Template to Config transformation. Optional.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.Template": {
      "description": "Template contains the inputs needed to produce a Config.",
      "required": [
        "objects"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "template.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ProcessedTemplate",
            "Template",
            "TemplateConfig"
          ]
        },
        "labels": {
          "description": "labels is a optional set of labels that are applied to every object during the Template to Config transformation.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "description": "message is an optional instructional message that will be displayed when this template is instantiated. This field should inform the user how to utilize the newly created resources. Parameter substitution will be performed on the message before being displayed so that generated credentials and other parameters can be included in the output.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "objects": {
          "description": "objects is an array of resources to include in this template. If a namespace value is hardcoded in the object, it will be removed during template instantiation, however if the namespace value is, or contains, a ${PARAMETER_REFERENCE}, the resolved value after parameter substitution will be respected and the object will be created in that namespace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
          }
        },
        "parameters": {
          "description": "parameters is an optional array of Parameters used during the Template to Config transformation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.Parameter"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ProcessedTemplate",
          "version": "v1"
        },
        {
          "group": "",
          "kind": "Template",
          "version": "v1"
        },
        {
          "group": "",
          "kind": "TemplateConfig",
          "version": "v1"
        },
        {
          "group": "template.openshift.io",
          "kind": "Template",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.TemplateInstance": {
      "description": "TemplateInstance requests and records the instantiation of a Template. TemplateInstance is part of an experimental API.",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "template.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TemplateInstance"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec describes the desired state of this TemplateInstance.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceSpec"
        },
        "status": {
          "description": "status describes the current state of this TemplateInstance.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "template.openshift.io",
          "kind": "TemplateInstance",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.TemplateInstanceCondition": {
      "description": "TemplateInstanceCondition contains condition information for a TemplateInstance.",
      "required": [
        "type",
        "status",
        "lastTransitionTime",
        "reason",
        "message"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the last time a condition status transitioned from one state to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable description of the details of the last transition, complementing reason.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False or Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of the condition, currently Ready or InstantiateFailure.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.TemplateInstanceList": {
      "description": "TemplateInstanceList is a list of TemplateInstance objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "template.openshift.io/v1"
          ]
        },
        "items": {
          "description": "items is a list of Templateinstances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstance"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TemplateInstanceList"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "template.openshift.io",
          "kind": "TemplateInstanceList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.TemplateInstanceObject": {
      "description": "TemplateInstanceObject references an object created by a TemplateInstance.",
      "properties": {
        "ref": {
          "description": "ref is a reference to the created object.  When used under .spec, only name and namespace are used; these can contain references to parameters which will be substituted following the usual rules.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.TemplateInstanceRequester": {
      "description": "TemplateInstanceRequester holds the identity of an agent requesting a template instantiation.",
      "properties": {
        "extra": {
          "description": "extra holds additional information provided by the authenticator.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "groups represent the groups this user is a part of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "description": "uid is a unique value that identifies this user across time; if this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "username uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.TemplateInstanceSpec": {
      "description": "TemplateInstanceSpec describes the desired state of a TemplateInstance.",
      "required": [
        "template",
        "requester"
      ],
      "properties": {
        "requester": {
          "description": "requester holds the identity of the agent requesting the template instantiation.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceRequester"
        },
        "secret": {
          "description": "secret is a reference to a Secret object containing the necessary template parameters.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "template": {
          "description": "template is a full copy of the template for instantiation.",
          "$ref": "#/definitions/com.github.openshift.api.template.v1.Template"
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.TemplateInstanceStatus": {
      "description": "TemplateInstanceStatus describes the current state of a TemplateInstance.",
      "properties": {
        "conditions": {
          "description": "conditions represent the latest available observations of a TemplateInstance's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceCondition"
          }
        },
        "objects": {
          "description": "Objects references the objects created by the TemplateInstance.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.TemplateInstanceObject"
          }
        }
      },
      "additionalProperties": false
    },
    "com.github.openshift.api.template.v1.TemplateList": {
      "description": "TemplateList is a list of Template objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "template.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.template.v1.Template"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TemplateList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "TemplateList",
          "version": "v1"
        },
        {
          "group": "template.openshift.io",
          "kind": "TemplateList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.user.v1.Group": {
      "description": "Group represents a referenceable set of Users",
      "required": [
        "users"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Group"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "users": {
          "description": "Users is the list of users in this group.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Group",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "Group",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.user.v1.GroupList": {
      "description": "GroupList is a collection of Groups",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of groups",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.user.v1.Group"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "GroupList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "GroupList",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "GroupList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.user.v1.Identity": {
      "description": "Identity records a successful authentication of a user with an identity provider. The information about the source of authentication is stored on the identity, and the identity is then associated with a single user object. Multiple identities can reference a single user. Information retrieved from the authentication provider is stored in the extra field using a schema determined by the provider.",
      "required": [
        "providerName",
        "providerUserName",
        "user"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "extra": {
          "description": "Extra holds extra information about this identity",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Identity"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "providerName": {
          "description": "ProviderName is the source of identity information",
          "type": "string"
        },
        "providerUserName": {
          "description": "ProviderUserName uniquely represents this identity in the scope of the provider",
          "type": "string"
        },
        "user": {
          "description": "User is a reference to the user this identity is associated with Both Name and UID must be set",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Identity",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "Identity",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.user.v1.IdentityList": {
      "description": "IdentityList is a collection of Identities",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of identities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.user.v1.Identity"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IdentityList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "IdentityList",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "IdentityList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.user.v1.User": {
      "description": "Upon log in, every user of the system receives a User and Identity resource. Administrators may directly manipulate the attributes of the users for their own tracking, or set groups via the API. The user name is unique and is chosen based on the value provided by the identity provider - if a user already exists with the incoming name, the user name may have a number appended to it depending on the configuration of the system.",
      "required": [
        "identities",
        "groups"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "fullName": {
          "description": "FullName is the full name of user",
          "type": "string"
        },
        "groups": {
          "description": "Groups specifies group names this user is a member of. This field is deprecated and will be removed in a future release. Instead, create a Group object containing the name of this User.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identities": {
          "description": "Identities are the identities associated with this user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "User"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "User",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "User",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.user.v1.UserIdentityMapping": {
      "description": "UserIdentityMapping maps a user to an identity",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "identity": {
          "description": "Identity is a reference to an identity",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "UserIdentityMapping"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "user": {
          "description": "User is a reference to a user",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "UserIdentityMapping",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "UserIdentityMapping",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "com.github.openshift.api.user.v1.UserList": {
      "description": "UserList is a collection of Users",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "user.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.openshift.api.user.v1.User"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "UserList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "UserList",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "UserList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration": {
      "description": "MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MutatingWebhookConfiguration"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.Webhook"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList": {
      "description": "MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of MutatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "MutatingWebhookConfigurationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfigurationList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.admissionregistration.v1beta1.RuleWithOperations": {
      "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If '*' is present, the length of the slice must be one. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.admissionregistration.v1beta1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "required": [
        "namespace",
        "name"
      ],
      "properties": {
        "name": {
          "description": "`name` is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "description": "`namespace` is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "`path` is an optional URL path which will be sent in any request to this service.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration": {
      "description": "ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ValidatingWebhookConfiguration"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.Webhook"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList": {
      "description": "ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "List of ValidatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ValidatingWebhookConfigurationList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfigurationList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.admissionregistration.v1beta1.Webhook": {
      "description": "Webhook describes an admission webhook and the resources and operations it applies to.",
      "required": [
        "name",
        "clientConfig"
      ],
      "properties": {
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the hook. Required",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.",
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig": {
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook",
      "required": [
        "caBundle"
      ],
      "properties": {
        "caBundle": {
          "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. Required.",
          "type": "string",
          "format": "byte"
        },
        "service": {
          "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.\n\nPort 443 will be used if it is open, otherwise it is an error.",
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ServiceReference"
        },
        "url": {
          "description": "`url` gives the location of the webhook, in standard URL form (`[scheme://]host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.ControllerRevision": {
      "description": "ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "required": [
        "revision"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "data": {
          "description": "Data is the serialized representation of the state.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerRevision"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "Revision indicates the revision of the state represented by Data.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.ControllerRevisionList": {
      "description": "ControllerRevisionList is a resource containing a list of ControllerRevision objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "description": "Items is the list of ControllerRevisions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerRevisionList"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevisionList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DaemonSet": {
      "description": "DaemonSet represents the configuration of a daemon set.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DaemonSet"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec"
        },
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DaemonSetCondition": {
      "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of DaemonSet condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DaemonSetList": {
      "description": "DaemonSetList is a collection of daemon sets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "description": "A list of daemon sets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DaemonSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSetList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DaemonSetSpec": {
      "description": "DaemonSetSpec is the specification of a daemon set.",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "An update strategy to replace existing DaemonSet pods with new pods.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DaemonSetStatus": {
      "description": "DaemonSetStatus represents the current status of a daemon set.",
      "required": [
        "currentNumberScheduled",
        "numberMisscheduled",
        "desiredNumberScheduled",
        "numberReady"
      ],
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a DaemonSet's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentNumberScheduled": {
          "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "desiredNumberScheduled": {
          "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberAvailable": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "numberMisscheduled": {
          "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberReady": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
          "type": "integer",
          "format": "int32"
        },
        "numberUnavailable": {
          "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the daemon set controller.",
          "type": "integer",
          "format": "int64"
        },
        "updatedNumberScheduled": {
          "description": "The total number of nodes that are running updated daemon pod",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
      "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDaemonSet"
        },
        "type": {
          "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.Deployment": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Deployment"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DeploymentList": {
      "description": "DeploymentList is a list of Deployments.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DeploymentList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DeploymentSpec": {
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Indicates that the deployment is paused.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "strategy": {
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy"
        },
        "template": {
          "description": "Template describes the pods that will be created.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DeploymentStatus": {
      "description": "DeploymentStatus is the most recently observed status of the Deployment.",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "collisionCount": {
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a deployment's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
          "type": "integer",
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment"
        },
        "type": {
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.ReplicaSet": {
      "description": "ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicaSet"
          ]
        },
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.ReplicaSetCondition": {
      "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of replica set condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.ReplicaSetList": {
      "description": "ReplicaSetList is a collection of ReplicaSets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicaSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSetList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec": {
      "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
      "required": [
        "selector"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.ReplicaSetStatus": {
      "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
      "required": [
        "replicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replica set's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.RollingUpdateDaemonSet": {
      "description": "Spec to control the desired behavior of daemon set rolling update.",
      "properties": {
        "maxUnavailable": {
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update.",
      "properties": {
        "maxSurge": {
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy": {
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
      "properties": {
        "partition": {
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.StatefulSet": {
      "description": "StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StatefulSet"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec"
        },
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.StatefulSetCondition": {
      "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of statefulset condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.StatefulSetList": {
      "description": "StatefulSetList is a collection of StatefulSets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StatefulSetList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSetList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.StatefulSetSpec": {
      "description": "A StatefulSetSpec is the specification of a StatefulSet.",
      "required": [
        "selector",
        "template",
        "serviceName"
      ],
      "properties": {
        "podManagementPolicy": {
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
          "type": "string"
        },
        "replicas": {
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "serviceName": {
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
          "type": "string"
        },
        "template": {
          "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
        },
        "volumeClaimTemplates": {
          "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.StatefulSetStatus": {
      "description": "StatefulSetStatus represents the current state of a StatefulSet.",
      "required": [
        "replicas"
      ],
      "properties": {
        "collisionCount": {
          "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a statefulset's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentReplicas": {
          "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
          "type": "integer",
          "format": "int32"
        },
        "currentRevision": {
          "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "replicas is the number of Pods created by the StatefulSet controller.",
          "type": "integer",
          "format": "int32"
        },
        "updateRevision": {
          "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "properties": {
        "rollingUpdate": {
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy"
        },
        "type": {
          "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.ControllerRevision": {
      "description": "DEPRECATED - This group version of ControllerRevision is deprecated by apps/v1beta2/ControllerRevision. See the release notes for more information. ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "required": [
        "revision"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta1"
          ]
        },
        "data": {
          "description": "Data is the serialized representation of the state.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerRevision"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "Revision indicates the revision of the state represented by Data.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.ControllerRevisionList": {
      "description": "ControllerRevisionList is a resource containing a list of ControllerRevision objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of ControllerRevisions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerRevisionList"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevisionList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.Deployment": {
      "description": "DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Deployment"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.DeploymentList": {
      "description": "DeploymentList is a list of Deployments.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DeploymentList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.DeploymentRollback": {
      "description": "DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.",
      "required": [
        "name",
        "rollbackTo"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentRollback"
          ]
        },
        "name": {
          "description": "Required: This must match the Name of a deployment.",
          "type": "string"
        },
        "rollbackTo": {
          "description": "The config of this deployment rollback.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.RollbackConfig"
        },
        "updatedAnnotations": {
          "description": "The annotations to be updated to a deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DeploymentRollback",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.DeploymentSpec": {
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
      "required": [
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Indicates that the deployment is paused.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.",
          "type": "integer",
          "format": "int32"
        },
        "rollbackTo": {
          "description": "DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.RollbackConfig"
        },
        "selector": {
          "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "strategy": {
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentStrategy"
        },
        "template": {
          "description": "Template describes the pods that will be created.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.DeploymentStatus": {
      "description": "DeploymentStatus is the most recently observed status of the Deployment.",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "collisionCount": {
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a deployment's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
          "type": "integer",
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.RollingUpdateDeployment"
        },
        "type": {
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.RollbackConfig": {
      "description": "DEPRECATED.",
      "properties": {
        "revision": {
          "description": "The revision to rollback to. If set to 0, rollback to the last revision.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update.",
      "properties": {
        "maxSurge": {
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.RollingUpdateStatefulSetStrategy": {
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
      "properties": {
        "partition": {
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.Scale": {
      "description": "Scale represents a scaling request for a resource.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Scale"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.ScaleSpec"
        },
        "status": {
          "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.ScaleStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Scale",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.ScaleSpec": {
      "description": "ScaleSpec describes the attributes of a scale subresource",
      "properties": {
        "replicas": {
          "description": "desired number of instances for the scaled object.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.ScaleStatus": {
      "description": "ScaleStatus represents the current status of a scale subresource.",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "description": "actual number of observed instances of the scaled object.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "targetSelector": {
          "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.StatefulSet": {
      "description": "DEPRECATED - This group version of StatefulSet is deprecated by apps/v1beta2/StatefulSet. See the release notes for more information. StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StatefulSet"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetSpec"
        },
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.StatefulSetCondition": {
      "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of statefulset condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.StatefulSetList": {
      "description": "StatefulSetList is a collection of StatefulSets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StatefulSetList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSetList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.StatefulSetSpec": {
      "description": "A StatefulSetSpec is the specification of a StatefulSet.",
      "required": [
        "template",
        "serviceName"
      ],
      "properties": {
        "podManagementPolicy": {
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
          "type": "string"
        },
        "replicas": {
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "serviceName": {
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
          "type": "string"
        },
        "template": {
          "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetUpdateStrategy"
        },
        "volumeClaimTemplates": {
          "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.StatefulSetStatus": {
      "description": "StatefulSetStatus represents the current state of a StatefulSet.",
      "required": [
        "replicas"
      ],
      "properties": {
        "collisionCount": {
          "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a statefulset's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentReplicas": {
          "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
          "type": "integer",
          "format": "int32"
        },
        "currentRevision": {
          "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "replicas is the number of Pods created by the StatefulSet controller.",
          "type": "integer",
          "format": "int32"
        },
        "updateRevision": {
          "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta1.StatefulSetUpdateStrategy": {
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "properties": {
        "rollingUpdate": {
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.RollingUpdateStatefulSetStrategy"
        },
        "type": {
          "description": "Type indicates the type of the StatefulSetUpdateStrategy.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ControllerRevision": {
      "description": "DEPRECATED - This group version of ControllerRevision is deprecated by apps/v1/ControllerRevision. See the release notes for more information. ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "required": [
        "revision"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "data": {
          "description": "Data is the serialized representation of the state.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerRevision"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "Revision indicates the revision of the state represented by Data.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ControllerRevisionList": {
      "description": "ControllerRevisionList is a resource containing a list of ControllerRevision objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "items": {
          "description": "Items is the list of ControllerRevisions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ControllerRevisionList"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevisionList",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DaemonSet": {
      "description": "DEPRECATED - This group version of DaemonSet is deprecated by apps/v1/DaemonSet. See the release notes for more information. DaemonSet represents the configuration of a daemon set.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DaemonSet"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetSpec"
        },
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DaemonSetCondition": {
      "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of DaemonSet condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DaemonSetList": {
      "description": "DaemonSetList is a collection of daemon sets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "items": {
          "description": "A list of daemon sets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DaemonSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSetList",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DaemonSetSpec": {
      "description": "DaemonSetSpec is the specification of a daemon set.",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "An update strategy to replace existing DaemonSet pods with new pods.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetUpdateStrategy"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DaemonSetStatus": {
      "description": "DaemonSetStatus represents the current status of a daemon set.",
      "required": [
        "currentNumberScheduled",
        "numberMisscheduled",
        "desiredNumberScheduled",
        "numberReady"
      ],
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a DaemonSet's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentNumberScheduled": {
          "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "desiredNumberScheduled": {
          "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberAvailable": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "numberMisscheduled": {
          "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberReady": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
          "type": "integer",
          "format": "int32"
        },
        "numberUnavailable": {
          "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the daemon set controller.",
          "type": "integer",
          "format": "int64"
        },
        "updatedNumberScheduled": {
          "description": "The total number of nodes that are running updated daemon pod",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DaemonSetUpdateStrategy": {
      "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.RollingUpdateDaemonSet"
        },
        "type": {
          "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.Deployment": {
      "description": "DEPRECATED - This group version of Deployment is deprecated by apps/v1/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Deployment"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DeploymentList": {
      "description": "DeploymentList is a list of Deployments.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DeploymentList",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DeploymentSpec": {
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Indicates that the deployment is paused.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "strategy": {
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentStrategy"
        },
        "template": {
          "description": "Template describes the pods that will be created.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DeploymentStatus": {
      "description": "DeploymentStatus is the most recently observed status of the Deployment.",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "collisionCount": {
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a deployment's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
          "type": "integer",
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.RollingUpdateDeployment"
        },
        "type": {
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ReplicaSet": {
      "description": "DEPRECATED - This group version of ReplicaSet is deprecated by apps/v1/ReplicaSet. See the release notes for more information. ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicaSet"
          ]
        },
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ReplicaSetCondition": {
      "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of replica set condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ReplicaSetList": {
      "description": "ReplicaSetList is a collection of ReplicaSets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "items": {
          "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicaSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSetList",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ReplicaSetSpec": {
      "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
      "required": [
        "selector"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ReplicaSetStatus": {
      "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
      "required": [
        "replicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replica set's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.RollingUpdateDaemonSet": {
      "description": "Spec to control the desired behavior of daemon set rolling update.",
      "properties": {
        "maxUnavailable": {
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update.",
      "properties": {
        "maxSurge": {
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.RollingUpdateStatefulSetStrategy": {
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
      "properties": {
        "partition": {
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.Scale": {
      "description": "Scale represents a scaling request for a resource.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Scale"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ScaleSpec"
        },
        "status": {
          "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ScaleStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Scale",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ScaleSpec": {
      "description": "ScaleSpec describes the attributes of a scale subresource",
      "properties": {
        "replicas": {
          "description": "desired number of instances for the scaled object.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.ScaleStatus": {
      "description": "ScaleStatus represents the current status of a scale subresource.",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "description": "actual number of observed instances of the scaled object.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "targetSelector": {
          "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.StatefulSet": {
      "description": "DEPRECATED - This group version of StatefulSet is deprecated by apps/v1/StatefulSet. See the release notes for more information. StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StatefulSet"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetSpec"
        },
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.StatefulSetCondition": {
      "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of statefulset condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.StatefulSetList": {
      "description": "StatefulSetList is a collection of StatefulSets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps/v1beta2"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StatefulSetList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSetList",
          "version": "v1beta2"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.StatefulSetSpec": {
      "description": "A StatefulSetSpec is the specification of a StatefulSet.",
      "required": [
        "selector",
        "template",
        "serviceName"
      ],
      "properties": {
        "podManagementPolicy": {
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
          "type": "string"
        },
        "replicas": {
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "serviceName": {
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
          "type": "string"
        },
        "template": {
          "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetUpdateStrategy"
        },
        "volumeClaimTemplates": {
          "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.StatefulSetStatus": {
      "description": "StatefulSetStatus represents the current state of a StatefulSet.",
      "required": [
        "replicas"
      ],
      "properties": {
        "collisionCount": {
          "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a statefulset's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentReplicas": {
          "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
          "type": "integer",
          "format": "int32"
        },
        "currentRevision": {
          "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "replicas is the number of Pods created by the StatefulSet controller.",
          "type": "integer",
          "format": "int32"
        },
        "updateRevision": {
          "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.apps.v1beta2.StatefulSetUpdateStrategy": {
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "properties": {
        "rollingUpdate": {
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.RollingUpdateStatefulSetStrategy"
        },
        "type": {
          "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authentication.v1.TokenReview": {
      "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authentication.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TokenReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request can be authenticated.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authentication.v1.TokenReviewSpec": {
      "description": "TokenReviewSpec is a description of the token authentication request.",
      "properties": {
        "token": {
          "description": "Token is the opaque bearer token.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authentication.v1.TokenReviewStatus": {
      "description": "TokenReviewStatus is the result of the token authentication request.",
      "properties": {
        "authenticated": {
          "description": "Authenticated indicates that the token was associated with a known user.",
          "type": "boolean"
        },
        "error": {
          "description": "Error indicates that the token couldn't be checked",
          "type": "string"
        },
        "user": {
          "description": "User is the UserInfo associated with the provided token.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authentication.v1.UserInfo": {
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.",
      "properties": {
        "extra": {
          "description": "Any additional information provided by the authenticator.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authentication.v1beta1.TokenReview": {
      "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authentication.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "TokenReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request can be authenticated.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authentication.v1beta1.TokenReviewSpec": {
      "description": "TokenReviewSpec is a description of the token authentication request.",
      "properties": {
        "token": {
          "description": "Token is the opaque bearer token.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authentication.v1beta1.TokenReviewStatus": {
      "description": "TokenReviewStatus is the result of the token authentication request.",
      "properties": {
        "authenticated": {
          "description": "Authenticated indicates that the token was associated with a known user.",
          "type": "boolean"
        },
        "error": {
          "description": "Error indicates that the token couldn't be checked",
          "type": "string"
        },
        "user": {
          "description": "User is the UserInfo associated with the provided token.",
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.UserInfo"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authentication.v1beta1.UserInfo": {
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.",
      "properties": {
        "extra": {
          "description": "Any additional information provided by the authenticator.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.LocalSubjectAccessReview": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LocalSubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.NonResourceAttributes": {
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface",
      "properties": {
        "path": {
          "description": "Path is the URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the standard HTTP verb",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.NonResourceRule": {
      "description": "NonResourceRule holds information that describes a rule for the non-resource",
      "required": [
        "verbs"
      ],
      "properties": {
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.ResourceAttributes": {
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
      "properties": {
        "group": {
          "description": "Group is the API Group of the Resource.  \"*\" means all.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types.  \"*\" means all.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is one of the existing resource types.  \"\" means none.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "string"
        },
        "version": {
          "description": "Version is the API Version of the Resource.  \"*\" means all.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.ResourceRule": {
      "description": "ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.\n \"*/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReview": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  user and groups must be empty",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec": {
      "description": "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "properties": {
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes"
        },
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReview": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectRulesReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates the set of actions a user can perform.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectRulesReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "properties": {
        "namespace": {
          "description": "Namespace to evaluate rules for. Required.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.SubjectAccessReview": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewSpec": {
      "description": "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "properties": {
        "extra": {
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "Groups is the groups you're testing for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes"
        },
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes"
        },
        "uid": {
          "description": "UID information about the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewStatus": {
      "description": "SubjectAccessReviewStatus",
      "required": [
        "allowed"
      ],
      "properties": {
        "allowed": {
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1.SubjectRulesReviewStatus": {
      "description": "SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.",
      "required": [
        "resourceRules",
        "nonResourceRules",
        "incomplete"
      ],
      "properties": {
        "evaluationError": {
          "description": "EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.",
          "type": "string"
        },
        "incomplete": {
          "description": "Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.",
          "type": "boolean"
        },
        "nonResourceRules": {
          "description": "NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceRule"
          }
        },
        "resourceRules": {
          "description": "ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceRule"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LocalSubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.NonResourceAttributes": {
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface",
      "properties": {
        "path": {
          "description": "Path is the URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the standard HTTP verb",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.NonResourceRule": {
      "description": "NonResourceRule holds information that describes a rule for the non-resource",
      "required": [
        "verbs"
      ],
      "properties": {
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.ResourceAttributes": {
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
      "properties": {
        "group": {
          "description": "Group is the API Group of the Resource.  \"*\" means all.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types.  \"*\" means all.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is one of the existing resource types.  \"\" means none.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "string"
        },
        "version": {
          "description": "Version is the API Version of the Resource.  \"*\" means all.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.ResourceRule": {
      "description": "ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.\n \"*/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  user and groups must be empty",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec": {
      "description": "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "properties": {
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceAttributes"
        },
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceAttributes"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SelfSubjectRulesReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates the set of actions a user can perform.",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec": {
      "properties": {
        "namespace": {
          "description": "Namespace to evaluate rules for. Required.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReview": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SubjectAccessReview"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec": {
      "description": "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
      "properties": {
        "extra": {
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "group": {
          "description": "Groups is the groups you're testing for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceAttributes"
        },
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request",
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceAttributes"
        },
        "uid": {
          "description": "UID information about the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus": {
      "description": "SubjectAccessReviewStatus",
      "required": [
        "allowed"
      ],
      "properties": {
        "allowed": {
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus": {
      "description": "SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.",
      "required": [
        "resourceRules",
        "nonResourceRules",
        "incomplete"
      ],
      "properties": {
        "evaluationError": {
          "description": "EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.",
          "type": "string"
        },
        "incomplete": {
          "description": "Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.",
          "type": "boolean"
        },
        "nonResourceRules": {
          "description": "NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceRule"
          }
        },
        "resourceRules": {
          "description": "ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceRule"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v1.CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\"",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler": {
      "description": "configuration of a horizontal pod autoscaler.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscaler"
          ]
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "current information about the autoscaler.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList": {
      "description": "list of horizontal pod autoscaler objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v1"
          ]
        },
        "items": {
          "description": "list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscalerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec": {
      "description": "specification of a horizontal pod autoscaler.",
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "properties": {
        "maxReplicas": {
          "description": "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
          "type": "integer",
          "format": "int32"
        },
        "minReplicas": {
          "description": "lower limit for the number of pods that can be set by the autoscaler, default 1.",
          "type": "integer",
          "format": "int32"
        },
        "scaleTargetRef": {
          "description": "reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
        },
        "targetCPUUtilizationPercentage": {
          "description": "target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus": {
      "description": "current status of a horizontal pod autoscaler",
      "required": [
        "currentReplicas",
        "desiredReplicas"
      ],
      "properties": {
        "currentCPUUtilizationPercentage": {
          "description": "current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.",
          "type": "integer",
          "format": "int32"
        },
        "currentReplicas": {
          "description": "current number of replicas of pods managed by this autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "desiredReplicas": {
          "description": "desired number of replicas of pods managed by this autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "lastScaleTime": {
          "description": "last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "observedGeneration": {
          "description": "most recent generation observed by this autoscaler.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v1.Scale": {
      "description": "Scale represents a scaling request for a resource.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Scale"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec"
        },
        "status": {
          "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v1.ScaleSpec": {
      "description": "ScaleSpec describes the attributes of a scale subresource.",
      "properties": {
        "replicas": {
          "description": "desired number of instances for the scaled object.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v1.ScaleStatus": {
      "description": "ScaleStatus represents the current status of a scale subresource.",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "description": "actual number of observed instances of the scaled object.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\"",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.ExternalMetricSource": {
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one \"target\" type should be set.",
      "required": [
        "metricName"
      ],
      "properties": {
        "metricName": {
          "description": "metricName is the name of the metric in question.",
          "type": "string"
        },
        "metricSelector": {
          "description": "metricSelector is used to identify a specific time series within a given metric.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "targetAverageValue": {
          "description": "targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "targetValue": {
          "description": "targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus": {
      "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.",
      "required": [
        "metricName",
        "currentValue"
      ],
      "properties": {
        "currentAverageValue": {
          "description": "currentAverageValue is the current value of metric averaged over autoscaled pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "currentValue": {
          "description": "currentValue is the current value of the metric (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metricName": {
          "description": "metricName is the name of a metric used for autoscaling in metric system.",
          "type": "string"
        },
        "metricSelector": {
          "description": "metricSelector is used to identify a specific time series within a given metric.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler": {
      "description": "HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v2beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscaler"
          ]
        },
        "metadata": {
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "status is the current information about the autoscaler.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition": {
      "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message is a human-readable explanation containing details about the transition",
          "type": "string"
        },
        "reason": {
          "description": "reason is the reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "status is the status of the condition (True, False, Unknown)",
          "type": "string"
        },
        "type": {
          "description": "type describes the current condition",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList": {
      "description": "HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "autoscaling/v2beta1"
          ]
        },
        "items": {
          "description": "items is the list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "HorizontalPodAutoscalerList"
          ]
        },
        "metadata": {
          "description": "metadata is the standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v2beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec": {
      "description": "HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.",
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "properties": {
        "maxReplicas": {
          "description": "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.",
          "type": "integer",
          "format": "int32"
        },
        "metrics": {
          "description": "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.MetricSpec"
          }
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.",
          "type": "integer",
          "format": "int32"
        },
        "scaleTargetRef": {
          "description": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus": {
      "description": "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.",
      "required": [
        "currentReplicas",
        "desiredReplicas",
        "currentMetrics",
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition"
          }
        },
        "currentMetrics": {
          "description": "currentMetrics is the last read state of the metrics used by this autoscaler.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.MetricStatus"
          }
        },
        "currentReplicas": {
          "description": "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "desiredReplicas": {
          "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.",
          "type": "integer",
          "format": "int32"
        },
        "lastScaleTime": {
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed by this autoscaler.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.MetricSpec": {
      "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "required": [
        "type"
      ],
      "properties": {
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ExternalMetricSource"
        },
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ObjectMetricSource"
        },
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.PodsMetricSource"
        },
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ResourceMetricSource"
        },
        "type": {
          "description": "type is the type of metric source.  It should be one of \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.MetricStatus": {
      "description": "MetricStatus describes the last-read state of a single metric.",
      "required": [
        "type"
      ],
      "properties": {
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus"
        },
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus"
        },
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.PodsMetricStatus"
        },
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus"
        },
        "type": {
          "description": "type is the type of metric source.  It will be one of \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.ObjectMetricSource": {
      "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "required": [
        "target",
        "metricName",
        "targetValue"
      ],
      "properties": {
        "metricName": {
          "description": "metricName is the name of the metric in question.",
          "type": "string"
        },
        "target": {
          "description": "target is the described Kubernetes object.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
        },
        "targetValue": {
          "description": "targetValue is the target value of the metric (as a quantity).",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus": {
      "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "required": [
        "target",
        "metricName",
        "currentValue"
      ],
      "properties": {
        "currentValue": {
          "description": "currentValue is the current value of the metric (as a quantity).",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metricName": {
          "description": "metricName is the name of the metric in question.",
          "type": "string"
        },
        "target": {
          "description": "target is the described Kubernetes object.",
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.PodsMetricSource": {
      "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
      "required": [
        "metricName",
        "targetAverageValue"
      ],
      "properties": {
        "metricName": {
          "description": "metricName is the name of the metric in question",
          "type": "string"
        },
        "targetAverageValue": {
          "description": "targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.PodsMetricStatus": {
      "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
      "required": [
        "metricName",
        "currentAverageValue"
      ],
      "properties": {
        "currentAverageValue": {
          "description": "currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metricName": {
          "description": "metricName is the name of the metric in question",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.ResourceMetricSource": {
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        },
        "targetAverageUtilization": {
          "description": "targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
          "type": "integer",
          "format": "int32"
        },
        "targetAverageValue": {
          "description": "targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus": {
      "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "required": [
        "name",
        "currentAverageValue"
      ],
      "properties": {
        "currentAverageUtilization": {
          "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.",
          "type": "integer",
          "format": "int32"
        },
        "currentAverageValue": {
          "description": "currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "name": {
          "description": "name is the name of the resource in question.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1.Job": {
      "description": "Job represents the configuration of a single job.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "batch/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Job"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
        },
        "status": {
          "description": "Current status of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1.JobCondition": {
      "description": "JobCondition describes current state of a job.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time the condition was checked.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of job condition, Complete or Failed.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1.JobList": {
      "description": "JobList is a collection of jobs.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "batch/v1"
          ]
        },
        "items": {
          "description": "items is the list of Jobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.Job"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "JobList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "JobList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1.JobSpec": {
      "description": "JobSpec describes how the job execution will look like.",
      "required": [
        "template"
      ],
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer",
          "type": "integer",
          "format": "int64"
        },
        "backoffLimit": {
          "description": "Specifies the number of retries before marking this job failed. Defaults to 6",
          "type": "integer",
          "format": "int32"
        },
        "completions": {
          "description": "Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "type": "integer",
          "format": "int32"
        },
        "manualSelector": {
          "description": "manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector",
          "type": "boolean"
        },
        "parallelism": {
          "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1.JobStatus": {
      "description": "JobStatus represents the current state of a Job.",
      "properties": {
        "active": {
          "description": "The number of actively running pods.",
          "type": "integer",
          "format": "int32"
        },
        "completionTime": {
          "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "conditions": {
          "description": "The latest available observations of an object's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.JobCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "failed": {
          "description": "The number of pods which reached phase Failed.",
          "type": "integer",
          "format": "int32"
        },
        "startTime": {
          "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "succeeded": {
          "description": "The number of pods which reached phase Succeeded.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1beta1.CronJob": {
      "description": "CronJob represents the configuration of a single cron job.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "batch/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CronJob"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec"
        },
        "status": {
          "description": "Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1beta1.CronJobList": {
      "description": "CronJobList is a collection of cron jobs.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "batch/v1beta1"
          ]
        },
        "items": {
          "description": "items is the list of CronJobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CronJobList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJobList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1beta1.CronJobSpec": {
      "description": "CronJobSpec describes how the job execution will look like and when it will actually run.",
      "required": [
        "schedule",
        "jobTemplate"
      ],
      "properties": {
        "concurrencyPolicy": {
          "description": "Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one",
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "description": "The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "jobTemplate": {
          "description": "Specifies the job that will be created when executing a CronJob.",
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.JobTemplateSpec"
        },
        "schedule": {
          "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.",
          "type": "integer",
          "format": "int64"
        },
        "successfulJobsHistoryLimit": {
          "description": "The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.",
          "type": "integer",
          "format": "int32"
        },
        "suspend": {
          "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1beta1.CronJobStatus": {
      "description": "CronJobStatus represents the current state of a cron job.",
      "properties": {
        "active": {
          "description": "A list of pointers to currently running jobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }
        },
        "lastScheduleTime": {
          "description": "Information when was the last time the job was successfully scheduled.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.batch.v1beta1.JobTemplateSpec": {
      "description": "JobTemplateSpec describes the data a Job should have when created from a template",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest": {
      "description": "Describes a certificate signing request",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CertificateSigningRequest"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The certificate request itself and any additional information.",
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec"
        },
        "status": {
          "description": "Derived information about the request.",
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition": {
      "required": [
        "type"
      ],
      "properties": {
        "lastUpdateTime": {
          "description": "timestamp for the last update to this condition",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "human readable message with details about the request state",
          "type": "string"
        },
        "reason": {
          "description": "brief reason for the request state",
          "type": "string"
        },
        "type": {
          "description": "request approval state, currently Approved or Denied.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList": {
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "CertificateSigningRequestList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequestList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec": {
      "description": "This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.",
      "required": [
        "request"
      ],
      "properties": {
        "extra": {
          "description": "Extra information about the requesting user. See user.Info interface for details.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groups": {
          "description": "Group information about the requesting user. See user.Info interface for details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "request": {
          "description": "Base64-encoded PKCS#10 CSR data",
          "type": "string",
          "format": "byte"
        },
        "uid": {
          "description": "UID information about the requesting user. See user.Info interface for details.",
          "type": "string"
        },
        "usages": {
          "description": "allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3\n     https://tools.ietf.org/html/rfc5280#section-4.2.1.12",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "description": "Information about the requesting user. See user.Info interface for details.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus": {
      "properties": {
        "certificate": {
          "description": "If request was approved, the controller will place the issued certificate here.",
          "type": "string",
          "format": "byte"
        },
        "conditions": {
          "description": "Conditions applied to the request, such as approval or denial.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "type": "integer",
          "format": "int32"
        },
        "readOnly": {
          "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "boolean"
        },
        "volumeID": {
          "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Affinity": {
      "description": "Affinity is a group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "description": "Describes node affinity scheduling rules for the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity"
        },
        "podAffinity": {
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity"
        },
        "podAntiAffinity": {
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.AttachedVolume": {
      "description": "AttachedVolume describes a volume attached to a node",
      "required": [
        "name",
        "devicePath"
      ],
      "properties": {
        "devicePath": {
          "description": "DevicePath represents the device path where the volume should be available",
          "type": "string"
        },
        "name": {
          "description": "Name of the attached volume",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "required": [
        "diskName",
        "diskURI"
      ],
      "properties": {
        "cachingMode": {
          "description": "Host Caching mode: None, Read Only, Read Write.",
          "type": "string"
        },
        "diskName": {
          "description": "The Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "The URI the data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "kind": {
          "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "required": [
        "secretName",
        "shareName"
      ],
      "properties": {
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "secretNamespace": {
          "description": "the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "required": [
        "secretName",
        "shareName"
      ],
      "properties": {
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Binding": {
      "description": "Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.",
      "required": [
        "target"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Binding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "target": {
          "description": "The target object that you want to bind to the standard object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Binding",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
      "description": "Represents storage that is managed by an external CSI volume driver (Beta feature)",
      "required": [
        "driver",
        "volumeHandle"
      ],
      "properties": {
        "controllerPublishSecretRef": {
          "description": "ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "driver": {
          "description": "Driver is the name of the driver to use for this volume. Required.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "nodeStageSecretRef": {
          "description": "NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "readOnly": {
          "description": "Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "description": "Attributes of the volume to publish.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "volumeHandle": {
          "description": "VolumeHandle is the unique volume name returned by the CSI volume plugin\u2019s CreateVolume to refer to the volume on all subsequent calls. Required.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "drop": {
          "description": "Removed capabilities",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "monitors"
      ],
      "properties": {
        "monitors": {
          "description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "user": {
          "description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "monitors"
      ],
      "properties": {
        "monitors": {
          "description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "user": {
          "description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "volumeID": {
          "description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "volumeID": {
          "description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ClientIPConfig": {
      "description": "ClientIPConfig represents the configurations of Client IP based session affinity.",
      "properties": {
        "timeoutSeconds": {
          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ComponentCondition": {
      "description": "Information about the condition of a component.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "error": {
          "description": "Condition error code for a component. For example, a health check error code.",
          "type": "string"
        },
        "message": {
          "description": "Message about the condition for a component. For example, information about a health check.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".",
          "type": "string"
        },
        "type": {
          "description": "Type of condition for a component. Valid value: \"Healthy\"",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ComponentStatus": {
      "description": "ComponentStatus (and ComponentStatusList) holds the cluster validation info.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "conditions": {
          "description": "List of component conditions observed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ComponentStatus"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ComponentStatus",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ComponentStatusList": {
      "description": "Status of all the conditions for the component as a list of ComponentStatus objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of ComponentStatus objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ComponentStatusList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ComponentStatusList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ConfigMap": {
      "description": "ConfigMap holds configuration data for pods to consume.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "binaryData": {
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "data": {
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConfigMap"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "description": "Selects a key from a ConfigMap.",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's key must be defined",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ConfigMapList": {
      "description": "ConfigMapList is a resource containing a list of ConfigMap objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "Items is the list of ConfigMaps.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ConfigMapList"
          ]
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMapList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ConfigMapNodeConfigSource": {
      "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.",
      "required": [
        "namespace",
        "name",
        "kubeletConfigKey"
      ],
      "properties": {
        "kubeletConfigKey": {
          "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
          "type": "string"
        },
        "name": {
          "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
          "type": "string"
        },
        "resourceVersion": {
          "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's keys must be defined",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's keys must be defined",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Container": {
      "description": "A single application container that you want to run within a pod.",
      "required": [
        "name"
      ],
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          }
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
        },
        "livenessProbe": {
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        },
        "resources": {
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "securityContext": {
          "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container. This is an alpha feature and may change in the future.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ContainerImage": {
      "description": "Describe a container image",
      "required": [
        "names"
      ],
      "properties": {
        "names": {
          "description": "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sizeBytes": {
          "description": "The size of the image in bytes.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "description": "ContainerPort represents a network port in a single container.",
      "required": [
        "containerPort"
      ],
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
          "type": "integer",
          "format": "int32"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ContainerState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "properties": {
        "running": {
          "description": "Details about a running container",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning"
        },
        "terminated": {
          "description": "Details about a terminated container",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated"
        },
        "waiting": {
          "description": "Details about a waiting container",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "description": "ContainerStateRunning is a running state of a container.",
      "properties": {
        "startedAt": {
          "description": "Time at which the container was last (re-)started",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "description": "ContainerStateTerminated is a terminated state of a container.",
      "required": [
        "exitCode"
      ],
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://<container_id>'",
          "type": "string"
        },
        "exitCode": {
          "description": "Exit status from the last termination of the container",
          "type": "integer",
          "format": "int32"
        },
        "finishedAt": {
          "description": "Time at which the container last terminated",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message regarding the last termination of the container",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason from the last termination of the container",
          "type": "string"
        },
        "signal": {
          "description": "Signal from the last termination of the container",
          "type": "integer",
          "format": "int32"
        },
        "startedAt": {
          "description": "Time at which previous execution of the container started",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "properties": {
        "message": {
          "description": "Message regarding why the container is not yet running.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason the container is not yet running.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ContainerStatus": {
      "description": "ContainerStatus contains details for the current status of this container.",
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://<container_id>'.",
          "type": "string"
        },
        "image": {
          "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imageID": {
          "description": "ImageID of the container's image.",
          "type": "string"
        },
        "lastState": {
          "description": "Details about the container's last termination condition.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState"
        },
        "name": {
          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
          "type": "string"
        },
        "ready": {
          "description": "Specifies whether the container has passed its readiness probe.",
          "type": "boolean"
        },
        "restartCount": {
          "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "description": "Details about the container's current condition.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.DaemonEndpoint": {
      "description": "DaemonEndpoint contains information about a single Daemon endpoint.",
      "required": [
        "Port"
      ],
      "properties": {
        "Port": {
          "description": "Port number of the given endpoint.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "required": [
        "path"
      ],
      "properties": {
        "fieldRef": {
          "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
        },
        "mode": {
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": "string"
        },
        "sizeLimit": {
          "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EndpointAddress": {
      "description": "EndpointAddress is a tuple that describes single IP address.",
      "required": [
        "ip"
      ],
      "properties": {
        "hostname": {
          "description": "The Hostname of this endpoint",
          "type": "string"
        },
        "ip": {
          "description": "The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.",
          "type": "string"
        },
        "nodeName": {
          "description": "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
          "type": "string"
        },
        "targetRef": {
          "description": "Reference to object providing the endpoint.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EndpointPort": {
      "description": "EndpointPort is a tuple that describes a single port.",
      "required": [
        "port"
      ],
      "properties": {
        "name": {
          "description": "The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.",
          "type": "string"
        },
        "port": {
          "description": "The port number of the endpoint.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "description": "The IP protocol for this port. Must be UDP or TCP. Default is TCP.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EndpointSubset": {
      "description": "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]",
      "properties": {
        "addresses": {
          "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          }
        },
        "notReadyAddresses": {
          "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          }
        },
        "ports": {
          "description": "Port numbers available on the related IP addresses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointPort"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Endpoints": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Endpoints"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EndpointsList": {
      "description": "EndpointsList is a list of endpoints.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of endpoints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EndpointsList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EndpointsList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "description": "EnvFromSource represents the source of a set of ConfigMaps",
      "properties": {
        "configMapRef": {
          "description": "The ConfigMap to select from",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "description": "The Secret to select from",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EnvVar": {
      "description": "EnvVar represents an environment variable present in a Container.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
          "type": "string"
        },
        "valueFrom": {
          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "properties": {
        "configMapKeyRef": {
          "description": "Selects a key of a ConfigMap.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
        },
        "fieldRef": {
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
        },
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector"
        },
        "secretKeyRef": {
          "description": "Selects a key of a secret in the pod's namespace",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Event": {
      "description": "Event is a report of an event somewhere in the cluster.",
      "required": [
        "metadata",
        "involvedObject"
      ],
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the Regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "type": "integer",
          "format": "int32"
        },
        "eventTime": {
          "description": "Time when this Event was first observed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "firstTimestamp": {
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "involvedObject": {
          "description": "The object that this event is about.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Event"
          ]
        },
        "lastTimestamp": {
          "description": "The time at which the most recent occurrence of this event was recorded.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "description": "Optional secondary object for more complex actions.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string"
        },
        "series": {
          "description": "Data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries"
        },
        "source": {
          "description": "The component reporting this event. Should be a short machine understandable string.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EventList": {
      "description": "EventList is a list of events.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of events",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Event"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EventList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EventList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "type": "integer",
          "format": "int32"
        },
        "lastObservedTime": {
          "description": "Time of the last occurrence observed",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "state": {
          "description": "State of this Series: Ongoing or Finished",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.EventSource": {
      "description": "EventSource contains information for an event.",
      "properties": {
        "component": {
          "description": "Component from which the event is generated.",
          "type": "string"
        },
        "host": {
          "description": "Node name on which the event is generated.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "lun": {
          "description": "Optional: FC target lun number",
          "type": "integer",
          "format": "int32"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "Optional: FC target worldwide names (WWNs)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wwids": {
          "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
      "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "Driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "description": "Optional: Extra command options if any.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "Driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "description": "Optional: Extra command options if any.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
          "type": "string"
        },
        "datasetUUID": {
          "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "required": [
        "pdName"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "integer",
          "format": "int32"
        },
        "pdName": {
          "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "required": [
        "repository"
      ],
      "properties": {
        "directory": {
          "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "Repository URL",
          "type": "string"
        },
        "revision": {
          "description": "Commit hash for the specified revision.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "endpoints",
        "path"
      ],
      "properties": {
        "endpoints": {
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "required": [
        "port"
      ],
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          }
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.HTTPHeader": {
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "The header field name",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Handler": {
      "description": "Handler defines a specific action that should be taken",
      "properties": {
        "exec": {
          "description": "One and only one of the following should be specified. Exec specifies the action to take.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
        },
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform.",
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
        },
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.HostAlias": {
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
      "description": "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI Target Lun number.",
          "type": "integer",
          "format": "int32"
        },
        "portals": {
          "description": "iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "CHAP Secret for iSCSI target and initiator authentication",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "targetPortal": {
          "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI Target Lun number.",
          "type": "integer",
          "format": "int32"
        },
        "portals": {
          "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "CHAP Secret for iSCSI target and initiator authentication",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "targetPortal": {
          "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "description": "Maps a string key to a path within a volume.",
      "required": [
        "key",
        "path"
      ],
      "properties": {
        "key": {
          "description": "The key to project.",
          "type": "string"
        },
        "mode": {
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler"
        },
        "preStop": {
          "description": "PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LimitRange": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LimitRange"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LimitRangeItem": {
      "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
      "properties": {
        "default": {
          "description": "Default resource requirement limit value by resource name if resource limit is omitted.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "defaultRequest": {
          "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "max": {
          "description": "Max usage constraints on this kind by resource name.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "maxLimitRequestRatio": {
          "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "min": {
          "description": "Min usage constraints on this kind by resource name.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "type": {
          "description": "Type of resource that this limit applies to.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LimitRangeList": {
      "description": "LimitRangeList is a list of LimitRange items.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "LimitRangeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRangeList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LimitRangeSpec": {
      "description": "LimitRangeSpec defines a min/max usage limit for resources that match on kind.",
      "required": [
        "limits"
      ],
      "properties": {
        "limits": {
          "description": "Limits is the list of LimitRangeItem objects that are enforced.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeItem"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LoadBalancerIngress": {
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
      "properties": {
        "hostname": {
          "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
          "type": "string"
        },
        "ip": {
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LoadBalancerStatus": {
      "description": "LoadBalancerStatus represents the status of a load-balancer.",
      "properties": {
        "ingress": {
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerIngress"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.LocalVolumeSource": {
      "description": "Local represents directly-attached storage with node affinity (Beta feature)",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...). Directories can be represented only by PersistentVolume with VolumeMode=Filesystem. Block devices can be represented only by VolumeMode=Block, which also requires the BlockVolume alpha feature gate to be enabled.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "server",
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "boolean"
        },
        "server": {
          "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Namespace": {
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Namespace"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec"
        },
        "status": {
          "description": "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NamespaceList": {
      "description": "NamespaceList is a list of Namespaces.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NamespaceList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NamespaceList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NamespaceSpec": {
      "description": "NamespaceSpec describes the attributes on a Namespace.",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NamespaceStatus": {
      "description": "NamespaceStatus is information about the current status of a Namespace.",
      "properties": {
        "phase": {
          "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Node": {
      "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Node"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec"
        },
        "status": {
          "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeAddress": {
      "description": "NodeAddress contains information for the node's address.",
      "required": [
        "type",
        "address"
      ],
      "properties": {
        "address": {
          "description": "The node address.",
          "type": "string"
        },
        "type": {
          "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeCondition": {
      "description": "NodeCondition contains condition information for a node.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastHeartbeatTime": {
          "description": "Last time we got an update on a given condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of node condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeConfigSource": {
      "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.",
      "properties": {
        "configMap": {
          "description": "ConfigMap is a reference to a Node's ConfigMap",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapNodeConfigSource"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeConfigStatus": {
      "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.",
      "properties": {
        "active": {
          "description": "Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        },
        "assigned": {
          "description": "Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        },
        "error": {
          "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.",
          "type": "string"
        },
        "lastKnownGood": {
          "description": "LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeDaemonEndpoints": {
      "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
      "properties": {
        "kubeletEndpoint": {
          "description": "Endpoint on which Kubelet is listening.",
          "$ref": "#/definitions/io.k8s.api.core.v1.DaemonEndpoint"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeList": {
      "description": "NodeList is the whole list of all Nodes which have been registered with master.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of nodes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Node"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NodeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NodeList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "required": [
        "nodeSelectorTerms"
      ],
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeSpec": {
      "description": "NodeSpec describes the attributes that a node is created with.",
      "properties": {
        "configSource": {
          "description": "If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        },
        "externalID": {
          "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966",
          "type": "string"
        },
        "podCIDR": {
          "description": "PodCIDR represents the pod IP range assigned to the node.",
          "type": "string"
        },
        "providerID": {
          "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
          "type": "string"
        },
        "taints": {
          "description": "If specified, the node's taints.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Taint"
          }
        },
        "unschedulable": {
          "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeStatus": {
      "description": "NodeStatus is information about the current status of a node.",
      "properties": {
        "addresses": {
          "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeAddress"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "allocatable": {
          "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "capacity": {
          "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "conditions": {
          "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "config": {
          "description": "Status of the config assigned to the node via the dynamic Kubelet config feature.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigStatus"
        },
        "daemonEndpoints": {
          "description": "Endpoints of daemons running on the Node.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeDaemonEndpoints"
        },
        "images": {
          "description": "List of container images on this node",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerImage"
          }
        },
        "nodeInfo": {
          "description": "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSystemInfo"
        },
        "phase": {
          "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.",
          "type": "string"
        },
        "volumesAttached": {
          "description": "List of volumes that are attached to the node.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.AttachedVolume"
          }
        },
        "volumesInUse": {
          "description": "List of attachable volumes in use (mounted) by the node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.NodeSystemInfo": {
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
      "required": [
        "machineID",
        "systemUUID",
        "bootID",
        "kernelVersion",
        "osImage",
        "containerRuntimeVersion",
        "kubeletVersion",
        "kubeProxyVersion",
        "operatingSystem",
        "architecture"
      ],
      "properties": {
        "architecture": {
          "description": "The Architecture reported by the node",
          "type": "string"
        },
        "bootID": {
          "description": "Boot ID reported by the node.",
          "type": "string"
        },
        "containerRuntimeVersion": {
          "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).",
          "type": "string"
        },
        "kernelVersion": {
          "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
          "type": "string"
        },
        "kubeProxyVersion": {
          "description": "KubeProxy Version reported by the node.",
          "type": "string"
        },
        "kubeletVersion": {
          "description": "Kubelet Version reported by the node.",
          "type": "string"
        },
        "machineID": {
          "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
          "type": "string"
        },
        "operatingSystem": {
          "description": "The Operating System reported by the node",
          "type": "string"
        },
        "osImage": {
          "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
          "type": "string"
        },
        "systemUUID": {
          "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "required": [
        "fieldPath"
      ],
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolume": {
      "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PersistentVolume"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
        },
        "status": {
          "description": "Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim": {
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PersistentVolumeClaim"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
        },
        "status": {
          "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "description": "PersistentVolumeClaimCondition contails details about state of pvc",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time we probed the condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimList": {
      "description": "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PersistentVolumeClaimList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaimList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "selector": {
          "description": "A label query over volumes to consider for binding.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is an alpha feature and may change in the future.",
          "type": "string"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capacity": {
          "description": "Represents the actual resources of the underlying volume.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "conditions": {
          "description": "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "Phase represents the current phase of PersistentVolumeClaim.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeList": {
      "description": "PersistentVolumeList is a list of PersistentVolume items.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PersistentVolumeList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeSpec": {
      "description": "PersistentVolumeSpec is the specification of a persistent volume.",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "awsElasticBlockStore": {
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
        },
        "azureDisk": {
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
        },
        "azureFile": {
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
        },
        "capacity": {
          "description": "A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "cephfs": {
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource"
        },
        "cinder": {
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource"
        },
        "claimRef": {
          "description": "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "csi": {
          "description": "CSI represents storage that handled by an external CSI driver (Beta feature).",
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource"
        },
        "fc": {
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
        },
        "flexVolume": {
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource"
        },
        "flocker": {
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running",
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
        },
        "gcePersistentDisk": {
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
        },
        "glusterfs": {
          "description": "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource"
        },
        "hostPath": {
          "description": "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
        },
        "iscsi": {
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
        },
        "local": {
          "description": "Local represents directly-attached storage with node affinity",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource"
        },
        "mountOptions": {
          "description": "A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nfs": {
          "description": "NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
        },
        "nodeAffinity": {
          "description": "NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.",
          "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity"
        },
        "persistentVolumeReclaimPolicy": {
          "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
          "type": "string"
        },
        "photonPersistentDisk": {
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
        },
        "portworxVolume": {
          "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
        },
        "quobyte": {
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
        },
        "rbd": {
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource"
        },
        "scaleIO": {
          "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
        },
        "storageClassName": {
          "description": "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
          "type": "string"
        },
        "storageos": {
          "description": "StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
        },
        "volumeMode": {
          "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is an alpha feature and may change in the future.",
          "type": "string"
        },
        "vsphereVolume": {
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PersistentVolumeStatus": {
      "description": "PersistentVolumeStatus is the current status of a persistent volume.",
      "properties": {
        "message": {
          "description": "A human-readable message indicating details about why the volume is in this state.",
          "type": "string"
        },
        "phase": {
          "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "description": "Represents a Photon Controller persistent disk resource.",
      "required": [
        "pdID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "description": "ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Pod": {
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Pod"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        },
        "status": {
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
      "required": [
        "topologyKey"
      ],
      "properties": {
        "labelSelector": {
          "description": "A label query over a set of resources, in this case pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "namespaces": {
          "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodCondition": {
      "description": "PodCondition contains details for the current condition of this pod.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time we probed the condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodDNSConfig": {
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
          }
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodList": {
      "description": "PodList is a list of Pods.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of pods. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Pod"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodReadinessGate": {
      "description": "PodReadinessGate contains the reference to a pod condition",
      "required": [
        "conditionType"
      ],
      "properties": {
        "conditionType": {
          "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
          "type": "integer",
          "format": "int64"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "type": "integer",
          "format": "int64"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "type": "integer",
          "format": "int64"
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodSpec": {
      "description": "PodSpec is a description of a pod.",
      "required": [
        "containers"
      ],
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
          "type": "integer",
          "format": "int64"
        },
        "affinity": {
          "description": "If specified, the pod's scheduling constraints",
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig"
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "description": "Use the host's ipc namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostname": {
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
          "type": "string"
        },
        "nodeSelector": {
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "type": "integer",
          "format": "int32"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          }
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
        },
        "serviceAccount": {
          "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "shareProcessNamespace": {
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is alpha-level and is honored only by servers that enable the PodShareProcessNamespace feature.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
          "type": "integer",
          "format": "int64"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodStatus": {
      "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.",
      "properties": {
        "conditions": {
          "description": "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "containerStatuses": {
          "description": "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          }
        },
        "hostIP": {
          "description": "IP address of the host to which the pod is assigned. Empty if not yet scheduled.",
          "type": "string"
        },
        "initContainerStatuses": {
          "description": "The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          }
        },
        "message": {
          "description": "A human readable message indicating details about why the pod is in this condition.",
          "type": "string"
        },
        "nominatedNodeName": {
          "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.",
          "type": "string"
        },
        "phase": {
          "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
          "type": "string"
        },
        "podIP": {
          "description": "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
          "type": "string"
        },
        "qosClass": {
          "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md",
          "type": "string"
        },
        "reason": {
          "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'",
          "type": "string"
        },
        "startTime": {
          "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodTemplate": {
      "description": "PodTemplate describes a template for creating copies of a predefined pod.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodTemplate"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "template": {
          "description": "Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodTemplateList": {
      "description": "PodTemplateList is a list of PodTemplates.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of pod templates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodTemplateList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplateList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PodTemplateSpec": {
      "description": "PodTemplateSpec describes the data a pod should have when created from a template",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "VolumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "required": [
        "weight",
        "preference"
      ],
      "properties": {
        "preference": {
          "description": "A node selector term, associated with the corresponding weight.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "description": "One and only one of the following should be specified. Exec specifies the action to take.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform.",
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": "integer",
          "format": "int32"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "description": "Represents a projected volume source",
      "required": [
        "sources"
      ],
      "properties": {
        "defaultMode": {
          "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "description": "list of volume projections",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "registry",
        "volume"
      ],
      "properties": {
        "group": {
          "description": "Group to map volume access to Default is no group",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": "boolean"
        },
        "registry": {
          "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "user": {
          "description": "User to map volume access to Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "description": "Volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "required": [
        "monitors",
        "image"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pool": {
          "description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "user": {
          "description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "required": [
        "monitors",
        "image"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pool": {
          "description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "user": {
          "description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ReplicationController": {
      "description": "ReplicationController represents the configuration of a replication controller.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicationController"
          ]
        },
        "metadata": {
          "description": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ReplicationControllerCondition": {
      "description": "ReplicationControllerCondition describes the state of a replication controller at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of replication controller condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ReplicationControllerList": {
      "description": "ReplicationControllerList is a collection of replication controllers.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicationControllerList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationControllerList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec": {
      "description": "ReplicationControllerSpec is the specification of a replication controller.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ReplicationControllerStatus": {
      "description": "ReplicationControllerStatus represents the current status of a replication controller.",
      "required": [
        "replicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replication controller.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replication controller's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replication controller.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed replication controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replication controller.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "required": [
        "resource"
      ],
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ResourceQuota": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ResourceQuota"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec"
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ResourceQuotaList": {
      "description": "ResourceQuotaList is a list of ResourceQuota items.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ResourceQuotaList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuotaList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ResourceQuotaSpec": {
      "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
      "properties": {
        "hard": {
          "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "scopeSelector": {
          "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ScopeSelector"
        },
        "scopes": {
          "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ResourceQuotaStatus": {
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.",
      "properties": {
        "hard": {
          "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "used": {
          "description": "Used is the current observed total usage of the resource in the namespace.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "requests": {
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "description": "SELinuxOptions are the labels to be applied to the container",
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
      "description": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        },
        "sslEnabled": {
          "description": "Flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "sslEnabled": {
          "description": "Flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ScopeSelector": {
      "description": "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.",
      "properties": {
        "matchExpressions": {
          "description": "A list of scope selector requirements by scope of the resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
      "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
      "required": [
        "scopeName",
        "operator"
      ],
      "properties": {
        "operator": {
          "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
          "type": "string"
        },
        "scopeName": {
          "description": "The name of the scope that the selector applies to.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Secret": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "data": {
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Secret"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "stringData": {
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Used to facilitate programmatic handling of secret data.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "description": "SecretKeySelector selects a key of a Secret.",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or it's key must be defined",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SecretList": {
      "description": "SecretList is a list of Secret.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "image.openshift.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Secret"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "SecretList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SecretList",
          "version": "v1"
        },
        {
          "group": "image.openshift.io",
          "kind": "SecretList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SecretReference": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "properties": {
        "name": {
          "description": "Name is unique within a namespace to reference a secret resource.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which the secret name must be unique.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }
        },
        "optional": {
          "description": "Specify whether the Secret or it's keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
          "type": "boolean"
        },
        "capabilities": {
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities"
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
          "type": "boolean"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "integer",
          "format": "int64"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "integer",
          "format": "int64"
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Service": {
      "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Service"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec"
        },
        "status": {
          "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ServiceAccount": {
      "description": "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceAccount"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "secrets": {
          "description": "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ServiceAccountList": {
      "description": "ServiceAccountList is a list of ServiceAccount objects",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceAccountList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccountList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "required": [
        "path"
      ],
      "properties": {
        "audience": {
          "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "Path is the path relative to the mount point of the file to project the token into.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ServiceList": {
      "description": "ServiceList holds a list of services.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "items": {
          "description": "List of services",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Service"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ServiceList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ServicePort": {
      "description": "ServicePort contains information on service's port.",
      "required": [
        "port"
      ],
      "properties": {
        "name": {
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "description": "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP.",
          "type": "string"
        },
        "targetPort": {
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ServiceSpec": {
      "description": "ServiceSpec describes the attributes that a user creates on a service.",
      "properties": {
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "externalIPs": {
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalName": {
          "description": "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.",
          "type": "integer",
          "format": "int32"
        },
        "loadBalancerIP": {
          "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "description": "publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.",
          "type": "boolean"
        },
        "selector": {
          "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sessionAffinity": {
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "sessionAffinityConfig": {
          "description": "sessionAffinityConfig contains the configurations of session affinity.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig"
        },
        "type": {
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.ServiceStatus": {
      "description": "ServiceStatus represents the current status of a service.",
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.SessionAffinityConfig": {
      "description": "SessionAffinityConfig represents the configurations of session affinity.",
      "properties": {
        "clientIP": {
          "description": "clientIP contains the configurations of Client IP based session affinity.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ClientIPConfig"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "volumeName": {
          "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "volumeName": {
          "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Sysctl": {
      "description": "Sysctl defines a kernel parameter to be set",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "required": [
        "port"
      ],
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Taint": {
      "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
      "required": [
        "key",
        "effect"
      ],
      "properties": {
        "effect": {
          "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Required. The taint key to be applied to a node.",
          "type": "string"
        },
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "value": {
          "description": "Required. The taint value corresponding to the taint key.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Toleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.TopologySelectorLabelRequirement": {
      "description": "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.",
      "required": [
        "key",
        "values"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.TopologySelectorTerm": {
      "description": "A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.",
      "properties": {
        "matchLabelExpressions": {
          "description": "A list of topology selector requirements by labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorLabelRequirement"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.Volume": {
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "required": [
        "name"
      ],
      "properties": {
        "awsElasticBlockStore": {
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
        },
        "azureDisk": {
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
        },
        "azureFile": {
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource"
        },
        "cephfs": {
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource"
        },
        "cinder": {
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource"
        },
        "configMap": {
          "description": "ConfigMap represents a configMap that should populate this volume",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource"
        },
        "downwardAPI": {
          "description": "DownwardAPI represents downward API about the pod that should populate this volume",
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource"
        },
        "emptyDir": {
          "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource"
        },
        "fc": {
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
        },
        "flexVolume": {
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource"
        },
        "flocker": {
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
        },
        "gcePersistentDisk": {
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
        },
        "gitRepo": {
          "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource"
        },
        "glusterfs": {
          "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource"
        },
        "hostPath": {
          "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
        },
        "iscsi": {
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource"
        },
        "name": {
          "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
        },
        "persistentVolumeClaim": {
          "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
        },
        "photonPersistentDisk": {
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
        },
        "portworxVolume": {
          "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
        },
        "projected": {
          "description": "Items for all in one resources secrets, configmaps, and downward API",
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource"
        },
        "quobyte": {
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
        },
        "rbd": {
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md",
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource"
        },
        "scaleIO": {
          "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource"
        },
        "secret": {
          "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource"
        },
        "storageos": {
          "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource"
        },
        "vsphereVolume": {
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "required": [
        "name",
        "devicePath"
      ],
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "required": [
        "name",
        "mountPath"
      ],
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
          "type": "string"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.VolumeNodeAffinity": {
      "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
      "properties": {
        "required": {
          "description": "Required specifies hard node constraints that must be met.",
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "description": "Projection that may be projected along with other supported volume types",
      "properties": {
        "configMap": {
          "description": "information about the configMap data to project",
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection"
        },
        "downwardAPI": {
          "description": "information about the downwardAPI data to project",
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection"
        },
        "secret": {
          "description": "information about the secret data to project",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection"
        },
        "serviceAccountToken": {
          "description": "information about the serviceAccountToken data to project",
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "description": "Represents a vSphere volume resource.",
      "required": [
        "volumePath"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "Storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "Path that identifies vSphere volume vmdk",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "properties": {
        "podAffinityTerm": {
          "description": "Required. A pod affinity term, associated with the corresponding weight.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.events.v1beta1.Event": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.",
      "required": [
        "eventTime"
      ],
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "events.k8s.io/v1beta1"
          ]
        },
        "deprecatedCount": {
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type",
          "type": "integer",
          "format": "int32"
        },
        "deprecatedFirstTimestamp": {
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedLastTimestamp": {
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedSource": {
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type",
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        },
        "eventTime": {
          "description": "Required. Time when this Event was first observed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Event"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "note": {
          "description": "Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken.",
          "type": "string"
        },
        "regarding": {
          "description": "The object this Event is about. In most cases it's an Object reporting controller implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "related": {
          "description": "Optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reportingController": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string"
        },
        "series": {
          "description": "Data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries"
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.events.v1beta1.EventList": {
      "description": "EventList is a list of Event objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "events.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "EventList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "EventList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.events.v1beta1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "required": [
        "count",
        "lastObservedTime",
        "state"
      ],
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "type": "integer",
          "format": "int32"
        },
        "lastObservedTime": {
          "description": "Time when last Event from the series was seen before last heartbeat.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "state": {
          "description": "Information whether this series is ongoing or finished.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.AllowedFlexVolume": {
      "description": "AllowedFlexVolume represents a single Flexvolume that is allowed to be used. Deprecated: use AllowedFlexVolume from policy API Group instead.",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "driver is the name of the Flexvolume driver.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.AllowedHostPath": {
      "description": "AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined. Deprecated: use AllowedHostPath from policy API Group instead.",
      "properties": {
        "pathPrefix": {
          "description": "pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.\n\nExamples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`",
          "type": "string"
        },
        "readOnly": {
          "description": "when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DaemonSet": {
      "description": "DEPRECATED - This group version of DaemonSet is deprecated by apps/v1beta2/DaemonSet. See the release notes for more information. DaemonSet represents the configuration of a daemon set.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DaemonSet"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetSpec"
        },
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "DaemonSet",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DaemonSetCondition": {
      "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of DaemonSet condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DaemonSetList": {
      "description": "DaemonSetList is a collection of daemon sets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "items": {
          "description": "A list of daemon sets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DaemonSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "DaemonSetList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DaemonSetSpec": {
      "description": "DaemonSetSpec is the specification of a daemon set.",
      "required": [
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        },
        "templateGeneration": {
          "description": "DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.",
          "type": "integer",
          "format": "int64"
        },
        "updateStrategy": {
          "description": "An update strategy to replace existing DaemonSet pods with new pods.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetUpdateStrategy"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DaemonSetStatus": {
      "description": "DaemonSetStatus represents the current status of a daemon set.",
      "required": [
        "currentNumberScheduled",
        "numberMisscheduled",
        "desiredNumberScheduled",
        "numberReady"
      ],
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a DaemonSet's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentNumberScheduled": {
          "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "desiredNumberScheduled": {
          "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberAvailable": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "numberMisscheduled": {
          "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberReady": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
          "type": "integer",
          "format": "int32"
        },
        "numberUnavailable": {
          "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the daemon set controller.",
          "type": "integer",
          "format": "int64"
        },
        "updatedNumberScheduled": {
          "description": "The total number of nodes that are running updated daemon pod",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DaemonSetUpdateStrategy": {
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollingUpdateDaemonSet"
        },
        "type": {
          "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is OnDelete.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.Deployment": {
      "description": "DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Deployment"
          ]
        },
        "metadata": {
          "description": "Standard object metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "Deployment",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DeploymentCondition": {
      "description": "DeploymentCondition describes the state of a deployment at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of deployment condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DeploymentList": {
      "description": "DeploymentList is a list of Deployments.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "DeploymentList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DeploymentRollback": {
      "description": "DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.",
      "required": [
        "name",
        "rollbackTo"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeploymentRollback"
          ]
        },
        "name": {
          "description": "Required: This must match the Name of a deployment.",
          "type": "string"
        },
        "rollbackTo": {
          "description": "The config of this deployment rollback.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollbackConfig"
        },
        "updatedAnnotations": {
          "description": "The annotations to be updated to a deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "DeploymentRollback",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DeploymentSpec": {
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
      "required": [
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "paused": {
          "description": "Indicates that the deployment is paused and will not be processed by the deployment controller.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "type": "integer",
          "format": "int32"
        },
        "rollbackTo": {
          "description": "DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollbackConfig"
        },
        "selector": {
          "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "strategy": {
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentStrategy"
        },
        "template": {
          "description": "Template describes the pods that will be created.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DeploymentStatus": {
      "description": "DeploymentStatus is the most recently observed status of the Deployment.",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "collisionCount": {
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a deployment's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
          "type": "integer",
          "format": "int32"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
          "type": "integer",
          "format": "int32"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollingUpdateDeployment"
        },
        "type": {
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.FSGroupStrategyOptions": {
      "description": "FSGroupStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use FSGroupStrategyOptions from policy API Group instead.",
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate what FSGroup is used in the SecurityContext.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.HTTPIngressPath": {
      "description": "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.",
      "required": [
        "backend"
      ],
      "properties": {
        "backend": {
          "description": "Backend defines the referenced service endpoint to which the traffic will be forwarded to.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressBackend"
        },
        "path": {
          "description": "Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue": {
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "required": [
        "paths"
      ],
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressPath"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.HostPortRange": {
      "description": "HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined. Deprecated: use HostPortRange from policy API Group instead.",
      "required": [
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "description": "max is the end of the range, inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "min": {
          "description": "min is the start of the range, inclusive.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.IDRange": {
      "description": "IDRange provides a min/max of an allowed range of IDs. Deprecated: use IDRange from policy API Group instead.",
      "required": [
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "description": "max is the end of the range, inclusive.",
          "type": "integer",
          "format": "int64"
        },
        "min": {
          "description": "min is the start of the range, inclusive.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.IPBlock": {
      "description": "DEPRECATED 1.9 - This group version of IPBlock is deprecated by networking/v1/IPBlock. IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.",
      "required": [
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\"",
          "type": "string"
        },
        "except": {
          "description": "Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" Except values will be rejected if they are outside the CIDR range",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.Ingress": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Ingress"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressSpec"
        },
        "status": {
          "description": "Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "required": [
        "serviceName",
        "servicePort"
      ],
      "properties": {
        "serviceName": {
          "description": "Specifies the name of the referenced service.",
          "type": "string"
        },
        "servicePort": {
          "description": "Specifies the port of the referenced service.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.IngressList": {
      "description": "IngressList is a collection of Ingress.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of Ingress.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "IngressList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "IngressList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "properties": {
        "host": {
          "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n\t  IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.",
      "properties": {
        "backend": {
          "description": "A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressBackend"
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressRule"
          }
        },
        "tls": {
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressTLS"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.",
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.IngressTLS": {
      "description": "IngressTLS describes the transport layer security associated with an Ingress.",
      "properties": {
        "hosts": {
          "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretName": {
          "description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicy": {
      "description": "DEPRECATED 1.9 - This group version of NetworkPolicy is deprecated by networking/v1/NetworkPolicy. NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkPolicy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior for this NetworkPolicy.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "NetworkPolicy",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicyEgressRule": {
      "description": "DEPRECATED 1.9 - This group version of NetworkPolicyEgressRule is deprecated by networking/v1/NetworkPolicyEgressRule. NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
      "properties": {
        "ports": {
          "description": "List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyPort"
          }
        },
        "to": {
          "description": "List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyPeer"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicyIngressRule": {
      "description": "DEPRECATED 1.9 - This group version of NetworkPolicyIngressRule is deprecated by networking/v1/NetworkPolicyIngressRule. This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.",
      "properties": {
        "from": {
          "description": "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyPeer"
          }
        },
        "ports": {
          "description": "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyPort"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicyList": {
      "description": "DEPRECATED 1.9 - This group version of NetworkPolicyList is deprecated by networking/v1/NetworkPolicyList. Network Policy List is a list of NetworkPolicy objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkPolicyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "NetworkPolicyList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicyPeer": {
      "description": "DEPRECATED 1.9 - This group version of NetworkPolicyPeer is deprecated by networking/v1/NetworkPolicyPeer.",
      "properties": {
        "ipBlock": {
          "description": "IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IPBlock"
        },
        "namespaceSelector": {
          "description": "Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "podSelector": {
          "description": "This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicyPort": {
      "description": "DEPRECATED 1.9 - This group version of NetworkPolicyPort is deprecated by networking/v1/NetworkPolicyPort.",
      "properties": {
        "port": {
          "description": "If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "protocol": {
          "description": "Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicySpec": {
      "description": "DEPRECATED 1.9 - This group version of NetworkPolicySpec is deprecated by networking/v1/NetworkPolicySpec.",
      "required": [
        "podSelector"
      ],
      "properties": {
        "egress": {
          "description": "List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyEgressRule"
          }
        },
        "ingress": {
          "description": "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicyIngressRule"
          }
        },
        "podSelector": {
          "description": "Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "policyTypes": {
          "description": "List of rule types that the NetworkPolicy relates to. Valid options are Ingress, Egress, or Ingress,Egress. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.PodSecurityPolicy": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. Deprecated: use PodSecurityPolicy from policy API Group instead.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines the policy enforced.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.PodSecurityPolicyList": {
      "description": "PodSecurityPolicyList is a list of PodSecurityPolicy objects. Deprecated: use PodSecurityPolicyList from policy API Group instead.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "PodSecurityPolicyList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.PodSecurityPolicySpec": {
      "description": "PodSecurityPolicySpec defines the policy enforced. Deprecated: use PodSecurityPolicySpec from policy API Group instead.",
      "required": [
        "seLinux",
        "runAsUser",
        "supplementalGroups",
        "fsGroup"
      ],
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.",
          "type": "boolean"
        },
        "allowedCapabilities": {
          "description": "allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedFlexVolumes": {
          "description": "allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"volumes\" field.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.AllowedFlexVolume"
          }
        },
        "allowedHostPaths": {
          "description": "allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.AllowedHostPath"
          }
        },
        "allowedUnsafeSysctls": {
          "description": "allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.\n\nExamples: e.g. \"foo/*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultAddCapabilities": {
          "description": "defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultAllowPrivilegeEscalation": {
          "description": "defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.",
          "type": "boolean"
        },
        "forbiddenSysctls": {
          "description": "forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.\n\nExamples: e.g. \"foo/*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fsGroup": {
          "description": "fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.FSGroupStrategyOptions"
        },
        "hostIPC": {
          "description": "hostIPC determines if the policy allows the use of HostIPC in the pod spec.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "hostPID determines if the policy allows the use of HostPID in the pod spec.",
          "type": "boolean"
        },
        "hostPorts": {
          "description": "hostPorts determines which host port ranges are allowed to be exposed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HostPortRange"
          }
        },
        "privileged": {
          "description": "privileged determines if a pod can request to be run as privileged.",
          "type": "boolean"
        },
        "readOnlyRootFilesystem": {
          "description": "readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
          "type": "boolean"
        },
        "requiredDropCapabilities": {
          "description": "requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "runAsUser": {
          "description": "runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RunAsUserStrategyOptions"
        },
        "seLinux": {
          "description": "seLinux is the strategy that will dictate the allowable labels that may be set.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.SELinuxStrategyOptions"
        },
        "supplementalGroups": {
          "description": "supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.SupplementalGroupsStrategyOptions"
        },
        "volumes": {
          "description": "volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.ReplicaSet": {
      "description": "DEPRECATED - This group version of ReplicaSet is deprecated by apps/v1beta2/ReplicaSet. See the release notes for more information. ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicaSet"
          ]
        },
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "ReplicaSet",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.ReplicaSetCondition": {
      "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of replica set condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.ReplicaSetList": {
      "description": "ReplicaSetList is a collection of ReplicaSets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "extensions/v1beta1"
          ]
        },
        "items": {
          "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ReplicaSetList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "ReplicaSetList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.ReplicaSetSpec": {
      "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.ReplicaSetStatus": {
      "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
      "required": [
        "replicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replica set's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.RollbackConfig": {
      "description": "DEPRECATED.",
      "properties": {
        "revision": {
          "description": "The revision to rollback to. If set to 0, rollback to the last revision.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.RollingUpdateDaemonSet": {
      "description": "Spec to control the desired behavior of daemon set rolling update.",
      "properties": {
        "maxUnavailable": {
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update.",
      "properties": {
        "maxSurge": {
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.RunAsUserStrategyOptions": {
      "description": "RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use RunAsUserStrategyOptions from policy API Group instead.",
      "required": [
        "rule"
      ],
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate the allowable RunAsUser values that may be set.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.SELinuxStrategyOptions": {
      "description": "SELinuxStrategyOptions defines the strategy type and any options used to create the strategy. Deprecated: use SELinuxStrategyOptions from policy API Group instead.",
      "required": [
        "rule"
      ],
      "properties": {
        "rule": {
          "description": "rule is the strategy that will dictate the allowable labels that may be set.",
          "type": "string"
        },
        "seLinuxOptions": {
          "description": "seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.Scale": {
      "description": "represents a scaling request for a resource.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apps.openshift.io/v1",
            "extensions/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Scale"
          ]
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ScaleSpec"
        },
        "status": {
          "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.",
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ScaleStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps.openshift.io",
          "kind": "Scale",
          "version": "v1"
        },
        {
          "group": "extensions",
          "kind": "Scale",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.ScaleSpec": {
      "description": "describes the attributes of a scale subresource",
      "properties": {
        "replicas": {
          "description": "desired number of instances for the scaled object.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.ScaleStatus": {
      "description": "represents the current status of a scale subresource.",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "description": "actual number of observed instances of the scaled object.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "targetSelector": {
          "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.extensions.v1beta1.SupplementalGroupsStrategyOptions": {
      "description": "SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy. Deprecated: use SupplementalGroupsStrategyOptions from policy API Group instead.",
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.networking.v1.IPBlock": {
      "description": "IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.",
      "required": [
        "cidr"
      ],
      "properties": {
        "cidr": {
          "description": "CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\"",
          "type": "string"
        },
        "except": {
          "description": "Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" Except values will be rejected if they are outside the CIDR range",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.networking.v1.NetworkPolicy": {
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkPolicy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior for this NetworkPolicy.",
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
      "description": "NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
      "properties": {
        "ports": {
          "description": "List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          }
        },
        "to": {
          "description": "List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
      "description": "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.",
      "properties": {
        "from": {
          "description": "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          }
        },
        "ports": {
          "description": "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.networking.v1.NetworkPolicyList": {
      "description": "NetworkPolicyList is a list of NetworkPolicy objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "networking.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "NetworkPolicyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicyList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.networking.v1.NetworkPolicyPeer": {
      "description": "NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed",
      "properties": {
        "ipBlock": {
          "description": "IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.",
          "$ref": "#/definitions/io.k8s.api.networking.v1.IPBlock"
        },
        "namespaceSelector": {
          "description": "Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "podSelector": {
          "description": "This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.networking.v1.NetworkPolicyPort": {
      "description": "NetworkPolicyPort describes a port to allow traffic on",
      "properties": {
        "port": {
          "description": "The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "protocol": {
          "description": "The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.networking.v1.NetworkPolicySpec": {
      "description": "NetworkPolicySpec provides the specification of a NetworkPolicy",
      "required": [
        "podSelector"
      ],
      "properties": {
        "egress": {
          "description": "List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
          }
        },
        "ingress": {
          "description": "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
          }
        },
        "podSelector": {
          "description": "Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "policyTypes": {
          "description": "List of rule types that the NetworkPolicy relates to. Valid options are Ingress, Egress, or Ingress,Egress. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.AllowedFlexVolume": {
      "description": "AllowedFlexVolume represents a single Flexvolume that is allowed to be used.",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "driver is the name of the Flexvolume driver.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.AllowedHostPath": {
      "description": "AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.",
      "properties": {
        "pathPrefix": {
          "description": "pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.\n\nExamples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`",
          "type": "string"
        },
        "readOnly": {
          "description": "when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.Eviction": {
      "description": "Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "deleteOptions": {
          "description": "DeleteOptions may be provided",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Eviction"
          ]
        },
        "metadata": {
          "description": "ObjectMeta describes the pod that is being evicted.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "Eviction",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.FSGroupStrategyOptions": {
      "description": "FSGroupStrategyOptions defines the strategy type and options used to create the strategy.",
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate what FSGroup is used in the SecurityContext.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.HostPortRange": {
      "description": "HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.",
      "required": [
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "description": "max is the end of the range, inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "min": {
          "description": "min is the start of the range, inclusive.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.IDRange": {
      "description": "IDRange provides a min/max of an allowed range of IDs.",
      "required": [
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "description": "max is the end of the range, inclusive.",
          "type": "integer",
          "format": "int64"
        },
        "min": {
          "description": "min is the start of the range, inclusive.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget": {
      "description": "PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodDisruptionBudget"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the PodDisruptionBudget.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec"
        },
        "status": {
          "description": "Most recently observed status of the PodDisruptionBudget.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList": {
      "description": "PodDisruptionBudgetList is a collection of PodDisruptionBudgets.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodDisruptionBudgetList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudgetList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec": {
      "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.",
      "properties": {
        "maxUnavailable": {
          "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "minAvailable": {
          "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "selector": {
          "description": "Label query over pods whose evictions are managed by the disruption budget.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus": {
      "description": "PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.",
      "required": [
        "disruptedPods",
        "disruptionsAllowed",
        "currentHealthy",
        "desiredHealthy",
        "expectedPods"
      ],
      "properties": {
        "currentHealthy": {
          "description": "current number of healthy pods",
          "type": "integer",
          "format": "int32"
        },
        "desiredHealthy": {
          "description": "minimum desired number of healthy pods",
          "type": "integer",
          "format": "int32"
        },
        "disruptedPods": {
          "description": "DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
          }
        },
        "disruptionsAllowed": {
          "description": "Number of pod disruptions that are currently allowed.",
          "type": "integer",
          "format": "int32"
        },
        "expectedPods": {
          "description": "total number of pods counted by this disruption budget",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB's object generation.",
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicy": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicy"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines the policy enforced.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicyList": {
      "description": "PodSecurityPolicyList is a list of PodSecurityPolicy objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "policy/v1beta1"
          ]
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PodSecurityPolicyList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicyList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicySpec": {
      "description": "PodSecurityPolicySpec defines the policy enforced.",
      "required": [
        "seLinux",
        "runAsUser",
        "supplementalGroups",
        "fsGroup"
      ],
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.",
          "type": "boolean"
        },
        "allowedCapabilities": {
          "description": "allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedFlexVolumes": {
          "description": "allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"volumes\" field.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedFlexVolume"
          }
        },
        "allowedHostPaths": {
          "description": "allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedHostPath"
          }
        },
        "allowedUnsafeSysctls": {
          "description": "allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.\n\nExamples: e.g. \"foo/*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultAddCapabilities": {
          "description": "defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultAllowPrivilegeEscalation": {
          "description": "defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.",
          "type": "boolean"
        },
        "forbiddenSysctls": {
          "description": "forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.\n\nExamples: e.g. \"foo/*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fsGroup": {
          "description": "fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.FSGroupStrategyOptions"
        },
        "hostIPC": {
          "description": "hostIPC determines if the policy allows the use of HostIPC in the pod spec.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "hostPID determines if the policy allows the use of HostPID in the pod spec.",
          "type": "boolean"
        },
        "hostPorts": {
          "description": "hostPorts determines which host port ranges are allowed to be exposed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.HostPortRange"
          }
        },
        "privileged": {
          "description": "privileged determines if a pod can request to be run as privileged.",
          "type": "boolean"
        },
        "readOnlyRootFilesystem": {
          "description": "readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
          "type": "boolean"
        },
        "requiredDropCapabilities": {
          "description": "requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "runAsUser": {
          "description": "runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions"
        },
        "seLinux": {
          "description": "seLinux is the strategy that will dictate the allowable labels that may be set.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SELinuxStrategyOptions"
        },
        "supplementalGroups": {
          "description": "supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.",
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions"
        },
        "volumes": {
          "description": "volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions": {
      "description": "RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.",
      "required": [
        "rule"
      ],
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate the allowable RunAsUser values that may be set.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.SELinuxStrategyOptions": {
      "description": "SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.",
      "required": [
        "rule"
      ],
      "properties": {
        "rule": {
          "description": "rule is the strategy that will dictate the allowable labels that may be set.",
          "type": "string"
        },
        "seLinuxOptions": {
          "description": "seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions": {
      "description": "SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.",
      "properties": {
        "ranges": {
          "description": "ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          }
        },
        "rule": {
          "description": "rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.AggregationRule": {
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.ClusterRole": {
      "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.",
      "required": [
        "rules"
      ],
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRole"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding": {
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.ClusterRoleBindingList": {
      "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.ClusterRoleList": {
      "description": "ClusterRoleList is a collection of ClusterRoles",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.Role": {
      "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.",
      "required": [
        "rules"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Role"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.RoleBinding": {
      "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.RoleBindingList": {
      "description": "RoleBindingList is a collection of RoleBindings",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBindingList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.RoleList": {
      "description": "RoleList is a collection of Roles",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.RoleRef": {
      "description": "RoleRef contains information that points to the role being used",
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1.Subject": {
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string"
        },
        "name": {
          "description": "Name of the object being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.AggregationRule": {
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.ClusterRole": {
      "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.",
      "required": [
        "rules"
      ],
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRole"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBinding": {
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBindingList": {
      "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleList": {
      "description": "ClusterRoleList is a collection of ClusterRoles",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "ClusterRoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.Role": {
      "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.",
      "required": [
        "rules"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Role"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.RoleBinding": {
      "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBinding"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.RoleBindingList": {
      "description": "RoleBindingList is a collection of RoleBindings",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleBindingList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBindingList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.RoleList": {
      "description": "RoleList is a collection of Roles",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "RoleList"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.RoleRef": {
      "description": "RoleRef contains information that points to the role being used",
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.rbac.v1beta1.Subject": {
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string"
        },
        "name": {
          "description": "Name of the object being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClass": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "required": [
        "value"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "scheduling.k8s.io/v1beta1"
          ]
        },
        "description": {
          "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used.",
          "type": "string"
        },
        "globalDefault": {
          "description": "globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PriorityClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClassList": {
      "description": "PriorityClassList is a collection of priority classes.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "scheduling.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "items is the list of PriorityClasses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "PriorityClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClassList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1.StorageClass": {
      "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.",
      "required": [
        "provisioner"
      ],
      "properties": {
        "allowVolumeExpansion": {
          "description": "AllowVolumeExpansion shows whether the storage class allow volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is alpha-level and is only honored by servers that enable the DynamicProvisioningScheduling feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          }
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parameters": {
          "description": "Parameters holds the parameters for the provisioner that should create volumes of this storage class.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "provisioner": {
          "description": "Provisioner indicates the type of the provisioner.",
          "type": "string"
        },
        "reclaimPolicy": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.",
          "type": "string"
        },
        "volumeBindingMode": {
          "description": "VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is alpha-level and is only honored by servers that enable the VolumeScheduling feature.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1.StorageClassList": {
      "description": "StorageClassList is a collection of storage classes.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1"
          ]
        },
        "items": {
          "description": "Items is the list of StorageClasses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClassList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1beta1.StorageClass": {
      "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.",
      "required": [
        "provisioner"
      ],
      "properties": {
        "allowVolumeExpansion": {
          "description": "AllowVolumeExpansion shows whether the storage class allow volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is alpha-level and is only honored by servers that enable the DynamicProvisioningScheduling feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          }
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageClass"
          ]
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parameters": {
          "description": "Parameters holds the parameters for the provisioner that should create volumes of this storage class.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "provisioner": {
          "description": "Provisioner indicates the type of the provisioner.",
          "type": "string"
        },
        "reclaimPolicy": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.",
          "type": "string"
        },
        "volumeBindingMode": {
          "description": "VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is alpha-level and is only honored by servers that enable the VolumeScheduling feature.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1beta1.StorageClassList": {
      "description": "StorageClassList is a collection of storage classes.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of StorageClasses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "StorageClassList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClassList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachment": {
      "description": "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeAttachment"
          ]
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec"
        },
        "status": {
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentList": {
      "description": "VolumeAttachmentList is a collection of VolumeAttachment objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "storage.k8s.io/v1beta1"
          ]
        },
        "items": {
          "description": "Items is the list of VolumeAttachments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "VolumeAttachmentList"
          ]
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachmentList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentSource": {
      "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.",
      "properties": {
        "persistentVolumeName": {
          "description": "Name of the persistent volume to attach.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentSpec": {
      "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.",
      "required": [
        "attacher",
        "source",
        "nodeName"
      ],
      "properties": {
        "attacher": {
          "description": "Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().",
          "type": "string"
        },
        "nodeName": {
          "description": "The node that the volume should be attached to.",
          "type": "string"
        },
        "source": {
          "description": "Source represents the volume that should be attached.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSource"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentStatus": {
      "description": "VolumeAttachmentStatus is the status of a VolumeAttachment request.",
      "required": [
        "attached"
      ],
      "properties": {
        "attachError": {
          "description": "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeError"
        },
        "attached": {
          "description": "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "boolean"
        },
        "attachmentMetadata": {
          "description": "Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "detachError": {
          "description": "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeError"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.api.storage.v1beta1.VolumeError": {
      "description": "VolumeError captures an error encountered during a volume operation.",
      "properties": {
        "message": {
          "description": "String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.",
          "type": "string"
        },
        "time": {
          "description": "Time the error was encountered.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.",
      "required": [
        "name",
        "versions"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIGroup"
          ]
        },
        "name": {
          "description": "name is the name of the group.",
          "type": "string"
        },
        "preferredVersion": {
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          }
        },
        "versions": {
          "description": "versions are the versions supported in this group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroup",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
      "required": [
        "groups"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIGroupList"
          ]
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroupList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "APIResource specifies the name of a resource and whether it is namespaced.",
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "properties": {
        "categories": {
          "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group": {
          "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
          "type": "string"
        },
        "kind": {
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
          "type": "string"
        },
        "name": {
          "description": "name is the plural name of the resource.",
          "type": "string"
        },
        "namespaced": {
          "description": "namespaced indicates if a resource is namespaced or not.",
          "type": "boolean"
        },
        "shortNames": {
          "description": "shortNames is a list of suggested short names of the resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "singularName": {
          "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
          "type": "string"
        },
        "verbs": {
          "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
      "required": [
        "groupVersion",
        "resources"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "groupVersion": {
          "description": "groupVersion is the group and version this APIResourceList is for.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIResourceList"
          ]
        },
        "resources": {
          "description": "resources contains the name of the resources and if they are namespaced.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIResourceList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions": {
      "description": "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.",
      "required": [
        "versions",
        "serverAddressByClientCIDRs"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIVersions"
          ]
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          }
        },
        "versions": {
          "description": "versions are the api versions that are available.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIVersions",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1",
            "admission.k8s.io/v1beta1",
            "admissionregistration.k8s.io/v1alpha1",
            "admissionregistration.k8s.io/v1beta1",
            "apiextensions.k8s.io/v1beta1",
            "apiregistration.k8s.io/v1",
            "apiregistration.k8s.io/v1beta1",
            "apps/v1",
            "apps/v1beta1",
            "apps/v1beta2",
            "apps.openshift.io/v1",
            "authentication.k8s.io/v1",
            "authentication.k8s.io/v1beta1",
            "authorization.k8s.io/v1",
            "authorization.k8s.io/v1beta1",
            "authorization.openshift.io/v1",
            "autoscaling/v1",
            "autoscaling/v2beta1",
            "batch/v1",
            "batch/v1beta1",
            "batch/v2alpha1",
            "build.openshift.io/v1",
            "certificates.k8s.io/v1beta1",
            "events.k8s.io/v1beta1",
            "extensions/v1beta1",
            "image.openshift.io/v1",
            "imagepolicy.k8s.io/v1alpha1",
            "network.openshift.io/v1",
            "networking.k8s.io/v1",
            "oauth.openshift.io/v1",
            "policy/v1beta1",
            "project.openshift.io/v1",
            "quota.openshift.io/v1",
            "rbac.authorization.k8s.io/v1",
            "rbac.authorization.k8s.io/v1alpha1",
            "rbac.authorization.k8s.io/v1beta1",
            "route.openshift.io/v1",
            "scheduling.k8s.io/v1alpha1",
            "scheduling.k8s.io/v1beta1",
            "security.openshift.io/v1",
            "settings.k8s.io/v1alpha1",
            "storage.k8s.io/v1",
            "storage.k8s.io/v1alpha1",
            "storage.k8s.io/v1beta1",
            "template.openshift.io/v1",
            "user.openshift.io/v1"
          ]
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "DeleteOptions"
          ]
        },
        "orphanDependents": {
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "type": "boolean"
        },
        "preconditions": {
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
        },
        "propagationPolicy": {
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta2"
        },
        {
          "group": "apps.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v2alpha1"
        },
        {
          "group": "build.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "image.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "imagepolicy.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "network.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "policy",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "project.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "route.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "security.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "settings.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "template.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "DeleteOptions",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
      "required": [
        "groupVersion",
        "version"
      ],
      "properties": {
        "groupVersion": {
          "description": "groupVersion specifies the API group and version in the form \"group/version\"",
          "type": "string"
        },
        "version": {
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Initializer": {
      "description": "Initializer is information about an initializer that has not yet completed.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name of the process that is responsible for initializing this object.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Initializers": {
      "description": "Initializers tracks the progress of initialization.",
      "required": [
        "pending"
      ],
      "properties": {
        "pending": {
          "description": "Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Initializer"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "result": {
          "description": "If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.",
          "type": "string"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
      "type": "string",
      "format": "date-time"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "initializers": {
          "description": "An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Initializers"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body."
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
      "properties": {
        "uid": {
          "description": "Specifies the target UID.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "properties": {
        "clientCIDR": {
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "type": "string"
        },
        "serverAddress": {
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
      "description": "Status is a return value for calls that don't return other objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "v1"
          ]
        },
        "code": {
          "description": "Suggested HTTP return code for this status, 0 if not set.",
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "Status"
          ]
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
          "type": "string"
        },
        "status": {
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Status",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "properties": {
        "causes": {
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
          }
        },
        "group": {
          "description": "The group attribute of the resource associated with the status StatusReason.",
          "type": "string"
        },
        "kind": {
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "type": "integer",
          "format": "int32"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "type": "string",
      "format": "date-time"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
      "description": "Event represents a single event to a watched resource.",
      "required": [
        "type",
        "object"
      ],
      "properties": {
        "object": {
          "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "type": {
          "type": "string"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta2"
        },
        {
          "group": "apps.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "authorization.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v2alpha1"
        },
        {
          "group": "build.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "image.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "imagepolicy.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "network.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "oauth.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "policy",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "project.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "quota.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "route.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "security.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "settings.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "template.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "user.openshift.io",
          "kind": "WatchEvent",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "required": [
        "Raw"
      ],
      "properties": {
        "Raw": {
          "description": "Raw is the underlying serialization of this object.",
          "type": "string",
          "format": "byte"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "integer"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService": {
      "description": "APIService represents a server for a particular GroupVersion. Name must be \"version.group\".",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiregistration.k8s.io/v1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIService"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec contains information for locating and communicating with a server",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec"
        },
        "status": {
          "description": "Status contains derived information about an API server",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition": {
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList": {
      "description": "APIServiceList is a list of APIService objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiregistration.k8s.io/v1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIServiceList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIServiceList",
          "version": "v1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec": {
      "description": "APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.",
      "required": [
        "service",
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "properties": {
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.",
          "type": "string",
          "format": "byte"
        },
        "group": {
          "description": "Group is the API group name this server hosts",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "description": "GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "type": "integer",
          "format": "int32"
        },
        "insecureSkipTLSVerify": {
          "description": "InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.",
          "type": "boolean"
        },
        "service": {
          "description": "Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference"
        },
        "version": {
          "description": "Version is the API version this server hosts.  For example, \"v1\"",
          "type": "string"
        },
        "versionPriority": {
          "description": "VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus": {
      "description": "APIServiceStatus contains derived information about an API server",
      "properties": {
        "conditions": {
          "description": "Current service state of apiService.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "properties": {
        "name": {
          "description": "Name is the name of the service",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the service",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService": {
      "description": "APIService represents a server for a particular GroupVersion. Name must be \"version.group\".",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiregistration.k8s.io/v1beta1"
          ]
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIService"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec contains information for locating and communicating with a server",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec"
        },
        "status": {
          "description": "Status contains derived information about an API server",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition": {
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList": {
      "description": "APIServiceList is a list of APIService objects.",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string",
          "enum": [
            "apiregistration.k8s.io/v1beta1"
          ]
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string",
          "enum": [
            "APIServiceList"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIServiceList",
          "version": "v1beta1"
        }
      ],
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec": {
      "description": "APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.",
      "required": [
        "service",
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "properties": {
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.",
          "type": "string",
          "format": "byte"
        },
        "group": {
          "description": "Group is the API group name this server hosts",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "description": "GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "type": "integer",
          "format": "int32"
        },
        "insecureSkipTLSVerify": {
          "description": "InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.",
          "type": "boolean"
        },
        "service": {
          "description": "Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.",
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference"
        },
        "version": {
          "description": "Version is the API version this server hosts.  For example, \"v1\"",
          "type": "string"
        },
        "versionPriority": {
          "description": "VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus": {
      "description": "APIServiceStatus contains derived information about an API server",
      "properties": {
        "conditions": {
          "description": "Current service state of apiService.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "additionalProperties": false
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "properties": {
        "name": {
          "description": "Name is the name of the service",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the service",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}